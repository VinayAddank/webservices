/**
 * 
 */
package org.rta.core.service.certificate.impl;

import java.io.File;
import java.sql.Timestamp;
import java.util.Date;

import org.apache.log4j.Logger;
import org.rta.core.dao.customer.CustomerCorporateDAO;
import org.rta.core.dao.customer.CustomerDAO;
import org.rta.core.dao.master.PermitTypeDAO;
import org.rta.core.dao.office.RtaOfficeDAO;
import org.rta.core.dao.permit.PermitAuthCardDAO;
import org.rta.core.dao.permit.PermitHeaderDAO;
import org.rta.core.dao.vehicle.VehicleDAO;
import org.rta.core.dao.vehicle.VehicleDetailsDAO;
import org.rta.core.dao.vehicle.cms.VehicleClassDescDAO;
import org.rta.core.entity.applicant.CustCorporateDetailsEntity;
import org.rta.core.entity.applicant.CustIndividualDetailsEntity;
import org.rta.core.entity.master.CountryEntity;
import org.rta.core.entity.master.DistrictEntity;
import org.rta.core.entity.master.MandalEntity;
import org.rta.core.entity.master.PermitTypeEntity;
import org.rta.core.entity.master.StateEntity;
import org.rta.core.entity.office.RtaOfficeEntity;
import org.rta.core.entity.permit.PermitAuthCardDetailsEntity;
import org.rta.core.entity.permit.PermitHeaderEntity;
import org.rta.core.entity.user.AddressEntity;
import org.rta.core.entity.vehicle.VehicleDetailsEntity;
import org.rta.core.entity.vehicle.VehicleRCEntity;
import org.rta.core.enums.OwnershipType;
import org.rta.core.enums.Status;
import org.rta.core.model.SaveUpdateResponse;
import org.rta.core.model.permit.PermitAuthorizationCardModel;
import org.rta.core.model.sync.SyncDataModel;
import org.rta.core.service.application.ApplicationService;
import org.rta.core.service.certificate.PermitAuthCardService;
import org.rta.core.utils.DateUtil;
import org.rta.core.utils.ObjectsUtil;
import org.rta.core.utils.StringsUtil;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

/**
 * @author arun.verma
 *
 */

@Service
public class PermitAuthCardServiceImpl implements PermitAuthCardService{

	private static final Logger log = Logger.getLogger(PermitAuthCardServiceImpl.class);
    
    @Autowired
    private PermitHeaderDAO permitHeaderDAO;
    
    @Autowired
    private PermitAuthCardDAO permitAuthCardDAO;
    
    @Autowired
    private VehicleDAO vehicleDAO;
    
    @Autowired
    private VehicleDetailsDAO vehicleDetailsDAO;

    @Autowired
    private CustomerDAO customerDAO;
    
    @Autowired
    private CustomerCorporateDAO customerCorporateDao;
    
    @Autowired
    private PermitTypeDAO permitTypeDAO;
    
    @Autowired
    private RtaOfficeDAO rtaOfficeDAO;
    
    @Autowired
    private VehicleClassDescDAO vehicleClassDescDAO;
    
    @Autowired
    private ApplicationService applicatioService;

    @Value("${attachments.downloaded.path}")
    private String attachmentDocPath;

    @Value("${rta.employee.signature.path}")
    private String signaturePath;

    @Value("${base.url}")
    private String baseURL;
    
    private static final long DAYS = 365;
    
    @Override
    @Transactional
    public SaveUpdateResponse createPermitAuthCard(PermitHeaderEntity permitHeader) {
        SaveUpdateResponse res = new SaveUpdateResponse();
        log.info("Generating Authorization Card for pr number : " + permitHeader.getVehicleRegdNo());
        VehicleRCEntity vehicleRCEntity = vehicleDAO.getVehicleRc4Pr(permitHeader.getVehicleRegdNo());
        
        PermitAuthCardDetailsEntity permitAuthCardEntity = permitAuthCardDAO.getActiveAuthCard(permitHeader.getPermitNo());
        
        RtaOfficeEntity rtaEntity = vehicleRCEntity.getRtaOfficeId();
        
        if(ObjectsUtil.isNull(permitAuthCardEntity)){
            permitAuthCardEntity = new PermitAuthCardDetailsEntity();
            //#TODO setAuthCardID => Authorization card number generated by Vahan portal
            permitAuthCardEntity.setAuthCardIssuedBy(rtaEntity.getName());
            permitAuthCardEntity.setAuthCardRemarks("");
            permitAuthCardEntity.setAuthCardVfdt(new Date());
            permitAuthCardEntity.setAuthCardVtdt(DateUtil.addDaysToDate(new Date(), 364));
            permitAuthCardEntity.setCreatedBy(permitHeader.getCreatedBy());
            permitAuthCardEntity.setCreatedOn(new Timestamp(new Date().getTime()));
            permitAuthCardEntity.setPermitNo(permitHeader.getPermitNo());
            permitAuthCardEntity.setRtaOfficeId(rtaEntity.getRtaOfficeId());
            permitAuthCardEntity.setStatus(Status.OPEN.getValue());
            permitAuthCardDAO.saveOrUpdate(permitAuthCardEntity);
            //#TODO get the seq number and generate the auth number : change the logic
            permitAuthCardEntity.setAuthCardId(getAuthCardNumber(rtaEntity.getCode(), permitAuthCardEntity.getPermitAuthCardDetailsId(), "AC"));
        } else {
            permitAuthCardEntity.setStatus(Status.CLOSED.getValue());
            permitAuthCardDAO.update(permitAuthCardEntity);
            //-------insert new row-------------------
            try {
                PermitAuthCardDetailsEntity permitAuthCardEntityUpdate = (PermitAuthCardDetailsEntity) permitAuthCardEntity.cloneable();
              //#TODO setAuthCardID => Authorization card number generated by Vahan portal
                permitAuthCardEntity.setAuthCardId(permitAuthCardEntity.getAuthCardId());
                permitAuthCardEntityUpdate.setAuthCardSeq(null);
                permitAuthCardEntityUpdate.setAuthCardIssuedBy(rtaEntity.getName());
                permitAuthCardEntityUpdate.setAuthCardRemarks("");
                permitAuthCardEntityUpdate.setAuthCardVfdt(new Date());
                permitAuthCardEntityUpdate.setAuthCardVtdt(DateUtil.addDaysToDate(new Date(), 364));
                permitAuthCardEntityUpdate.setCreatedBy(permitHeader.getCreatedBy());
                permitAuthCardEntityUpdate.setCreatedOn(new Timestamp(new Date().getTime()));
                permitAuthCardEntityUpdate.setPermitNo(permitHeader.getPermitNo());
                permitAuthCardEntityUpdate.setRtaOfficeId(rtaEntity.getRtaOfficeId());
                permitAuthCardEntityUpdate.setStatus(Status.OPEN.getValue());
                permitAuthCardDAO.save(permitAuthCardEntityUpdate);
            } catch (CloneNotSupportedException e) {
                log.error("Error while clonning ... ");
                e.printStackTrace();
                res.setStatus(SaveUpdateResponse.FAILURE);
                return res;
            }
        }
        log.info("Authorization Card for pr number : " + permitHeader.getVehicleRegdNo() + " generated...");
        res.setStatus(SaveUpdateResponse.SUCCESS);
        return res;
    }

    @Override
    @Transactional
    public SaveUpdateResponse renewPermitAuthCard(SyncDataModel syncDataModel) {
        SaveUpdateResponse res = new SaveUpdateResponse();
        String prNumber = syncDataModel.getPrNumber();
        log.info("Renew Authorization Card for pr number : " + prNumber);
        VehicleRCEntity vehicleRCEntity = vehicleDAO.getVehicleRc4Pr(prNumber);
        if(ObjectsUtil.isNull(vehicleRCEntity)){
            log.info("Vehicle Not Found for Given PR Number : " + prNumber);
            throw new IllegalArgumentException("Vehicle Not Found for Given PR Number !!!");
        }
        PermitHeaderEntity permitHeader = permitHeaderDAO.getPrimaryPermitActiveByPr(prNumber);
        if(ObjectsUtil.isNull(permitHeader)){
            log.info("Permit Not Found for Given PR Number : " + prNumber);
            throw new IllegalArgumentException("Permit Not Found for Given PR Number !!!");
        }
        if(permitHeader.getPermitType().equalsIgnoreCase("NP")){
        	log.info("For permit type NP authorization card will be generated on vaahan site..........");
        	res.setMessage("For permit type NP authorization card will be generated on vaahan site.");
        	res.setStatus(SaveUpdateResponse.SUCCESS);
            return res;
        } else if(!(permitHeader.getPermitType().equalsIgnoreCase("AITP") || permitHeader.getPermitType().equalsIgnoreCase("AITC"))){
        	log.error("Authorization card renewal is not applicable on : " + permitHeader.getPermitType());
        	res.setStatus(SaveUpdateResponse.FAILURE);
        	res.setMessage("Permit Authorization Card Renewal is not applicable on selected Permit Type .");
            return res;
        }
        PermitAuthCardDetailsEntity permitAuthCardEntity = permitAuthCardDAO.getActiveAuthCard(permitHeader.getPermitNo());
        if(ObjectsUtil.isNull(permitAuthCardEntity)){
            log.info("Permit AuthorizationCard Not Found PR Number : " + prNumber);
            throw new IllegalArgumentException("Permit AuthorizationCard Not Found for Given PR Number !!!");
        }
        RtaOfficeEntity rtaEntity = vehicleRCEntity.getRtaOfficeId();
        permitAuthCardEntity.setStatus(Status.CLOSED.getValue());
        permitAuthCardEntity.setModifiedOn(new Timestamp(new Date().getTime()));
        permitAuthCardDAO.update(permitAuthCardEntity);
        //-------insert new row-------------------
        try {
            PermitAuthCardDetailsEntity permitAuthCardEntityUpdate = (PermitAuthCardDetailsEntity) permitAuthCardEntity.cloneable();
          //#TODO setAuthCardID => Authorization card number generated by Vahan portal
            permitAuthCardEntityUpdate.setAuthCardSeq(null);
            permitAuthCardEntityUpdate.setAuthCardIssuedBy(rtaEntity.getName());
            permitAuthCardEntityUpdate.setAuthCardRemarks("");
            permitAuthCardEntityUpdate.setAuthCardVfdt(new Date());
            long numberOfDays = DateUtil.getNumberOfDays(permitHeader.getValidToDate().getTime(), DateUtil.addYears(new Date().getTime()/1000, 1));
            if( numberOfDays <= DAYS){
                permitAuthCardEntityUpdate.setAuthCardVtdt(permitHeader.getValidToDate());
            } else {
                permitAuthCardEntityUpdate.setAuthCardVtdt(DateUtil.addDaysToDate(new Date(), 364));
            }
            permitAuthCardEntityUpdate.setCreatedBy(permitHeader.getCreatedBy());
            permitAuthCardEntityUpdate.setCreatedOn(new Timestamp(new Date().getTime()));
            permitAuthCardEntityUpdate.setPermitNo(permitHeader.getPermitNo());
            permitAuthCardEntityUpdate.setRtaOfficeId(rtaEntity.getRtaOfficeId());
            permitAuthCardEntity.setAuthCardId(permitAuthCardEntity.getAuthCardId());
            permitAuthCardEntityUpdate.setStatus(Status.OPEN.getValue());
            permitAuthCardDAO.save(permitAuthCardEntityUpdate);
        } catch (CloneNotSupportedException e) {
            log.error("Error while clonning ... ");
            e.printStackTrace();
            res.setStatus(SaveUpdateResponse.FAILURE);
            return res;
        }
        log.info("Authorization Card for pr number : " + prNumber + " generated...");
        res.setStatus(SaveUpdateResponse.SUCCESS);
        return res;
    }

    @Override
    @Transactional
    public PermitAuthorizationCardModel getPermitAuthCardDetails(String prNumber) {
        VehicleRCEntity vehicleRcEntity = vehicleDAO.getVehicleRCByPRNumber(prNumber);
        if (ObjectsUtil.isNull(vehicleRcEntity)) {
            log.error("permit auth card details.. vehicleRc details not found ");
            return null;
        }
        VehicleDetailsEntity vehicleDetailsEntity = vehicleDetailsDAO.getByVehicleRcId(vehicleRcEntity.getVehicleRcId());
        if (ObjectsUtil.isNull(vehicleDetailsEntity)) {
            log.error("permit auth card details.. vehicle details not found ");
            return null;
        }
        PermitHeaderEntity permitHeaderEntity = permitHeaderDAO.getPrimaryPermitActiveByPr(prNumber);
        if (ObjectsUtil.isNull(permitHeaderEntity)) {
            log.error("permit auth card details.. permit header details not found ");
            return null;
        }
        PermitAuthCardDetailsEntity permitAuthCardEntity = permitAuthCardDAO.getActiveAuthCard(permitHeaderEntity.getPermitNo());
        if (ObjectsUtil.isNull(permitAuthCardEntity)) {
            log.error("permit auth card : permit auth card details not found ");
            return null;
        }
        PermitAuthorizationCardModel model = new PermitAuthorizationCardModel();
        RtaOfficeEntity rtaOfficeEntity = rtaOfficeDAO.getRtaOfficeById(permitHeaderEntity.getRtaOfficeId());
        model.setAuthority(rtaOfficeEntity.getName());
        model.setBodyType(vehicleDetailsEntity.getBodyTypeUpdated());
        String careOff = null;
        String nameOfHolder = null;
        OwnershipType ownershipType = OwnershipType.getOwnershipType(vehicleRcEntity.getOwnershipType());
        if (ownershipType == OwnershipType.INDIVIDUAL) {
            CustIndividualDetailsEntity tAe = customerDAO.getByVehicleRcId(vehicleRcEntity.getVehicleRcId());
            nameOfHolder = tAe.getDisplayName();
            careOff = tAe.getFatherName();
        } else if (ownershipType == OwnershipType.COMPANY || ownershipType == OwnershipType.POLICE || ownershipType == OwnershipType.STU_VEHICLES
        		|| ownershipType == OwnershipType.ORGANIZATION) {
            CustCorporateDetailsEntity tAe = customerCorporateDao.getByVehicleRcId(vehicleRcEntity.getVehicleRcId());
            nameOfHolder = tAe.getDisplayName();
            careOff = tAe.getCompanyName();
        }
        model.setCareOff(careOff);
        model.setChassisNo(vehicleDetailsEntity.getChassisNo());
        model.setDate(vehicleRcEntity.getPrIssueTime());
        model.setDateOfRegAsNew(vehicleRcEntity.getPrIssueTime());
        model.setEngineNo(vehicleDetailsEntity.getEngineNo());
//        model.setFareRate(permitHeaderEntity.get); couldn't find anywhere
        model.setFullAddress(getCustomerFullAddress(vehicleRcEntity.getVehicleRcId(), ownershipType));
        model.setMakersName(vehicleDetailsEntity.getMakerName());
        model.setManufactureYear(vehicleDetailsEntity.getMfgDate());
        model.setMaxPassangerCapacity(vehicleDetailsEntity.getSeatingCapacity());
        model.setNameOfHolder(nameOfHolder);
        model.setIsTempPermit(permitHeaderEntity.getIsTempPermit());
            PermitTypeEntity pte = permitTypeDAO.getPermitTypeByCode(permitHeaderEntity.getPermitType());
            String permitTypeName = pte.getName();
            model.setPermitArea(permitTypeName);
        model.setPermitNo(permitAuthCardEntity.getPermitNo());
        model.setPlace(rtaOfficeEntity.getName());
        model.setPrNumber(prNumber);
        model.setRenewedUpto(permitAuthCardEntity.getAuthCardVtdt().getTime()/1000);
        model.setRtaOfficeName(rtaOfficeEntity.getName());
        model.setValidFrom(permitAuthCardEntity.getAuthCardVfdt().getTime()/1000);
        model.setValidTo(permitAuthCardEntity.getAuthCardVtdt().getTime()/1000);
        model.setVehicleClassDesc(vehicleClassDescDAO.getByVehiclClassDesCode(vehicleDetailsEntity.getVehicleSubClass()).getDescription());
        model.setRlw(vehicleDetailsEntity.getRlw());
        model.setUlw(vehicleDetailsEntity.getUlw());
        model.setAuthorizationNumber(permitAuthCardEntity.getAuthCardId());
        model.setPermitExpiryDate(DateUtil.convertToRunningTimeStamp(permitHeaderEntity.getValidToDate()));
        model.setAuthExpiryDate(DateUtil.convertToRunningTimeStamp(permitAuthCardEntity.getAuthCardVtdt()));
        // ---- set RTO signature----------------------
        try {
            String fileName = applicatioService.getRtoSignFileName(rtaOfficeEntity.getCode());
            String signatureFile = baseURL + File.separator + signaturePath + File.separator + fileName;
            model.setRtoSignFilePath(signatureFile);
        } catch (Exception ex) {
            log.error("Exception While reading signature in permit auth card ......");
            log.debug("Exception : ", ex);
        }
        return model;
    }
    
    private String getCustomerFullAddress(Long vehicleRcId, OwnershipType ownershipType) {
        StringBuilder sb = new StringBuilder();
        switch (ownershipType) {
            case POLICE:
            case COMPANY:
            case STU_VEHICLES:
            case ORGANIZATION: {
                CustCorporateDetailsEntity entity = customerCorporateDao.getByVehicleRcId(vehicleRcId);
                AddressEntity address = customerCorporateDao.getAddressDetailsByUserId(entity.getCustCorpDtlsId(), "T");
                MandalEntity mandalEntity = address.getMandal();
                DistrictEntity districtEntity = mandalEntity.getDistrictEntity();
                StateEntity stateEntity = districtEntity.getStateEntity();
                CountryEntity countryEntity = stateEntity.getCountryEntity();
                sb = new StringBuilder(address.getDoorNo());
                StringsUtil.appendIfNotNull(sb, address.getStreet());
                StringsUtil.appendIfNotNull(sb, address.getCity());
                StringsUtil.appendIfNotNull(sb, mandalEntity.getName());
                StringsUtil.appendIfNotNull(sb, districtEntity.getName());
                StringsUtil.appendIfNotNull(sb, stateEntity.getName());
                StringsUtil.appendIfNotNull(sb, countryEntity.getName());
                break;
            }
            case INDIVIDUAL: {
                CustIndividualDetailsEntity entity = customerDAO.getByVehicleRcId(vehicleRcId);
                AddressEntity address = customerDAO.getAddressDetailsByUserId(entity.getCustIndDtlId(), "T");
                MandalEntity mandalEntity = address.getMandal();
                DistrictEntity districtEntity = mandalEntity.getDistrictEntity();
                StateEntity stateEntity = districtEntity.getStateEntity();
                CountryEntity countryEntity = stateEntity.getCountryEntity();
                sb = new StringBuilder(address.getDoorNo());
                StringsUtil.appendIfNotNull(sb, address.getStreet());
                StringsUtil.appendIfNotNull(sb, address.getCity());
                StringsUtil.appendIfNotNull(sb, mandalEntity.getName());
                StringsUtil.appendIfNotNull(sb, districtEntity.getName());
                StringsUtil.appendIfNotNull(sb, stateEntity.getName());
                StringsUtil.appendIfNotNull(sb, countryEntity.getName());
            }
        }
        return sb.toString();
    }
    
    private String getAuthCardNumber(String rtaOfficeCode, Long seq, String type){
        return rtaOfficeCode + "/" + seq + "/" + type + "/" + DateUtil.getYear(DateUtil.toCurrentUTCTimeStamp());
    }
}
