package org.rta.core.service.finance.impl;

import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.log4j.Logger;
import org.json.JSONObject;
import org.rta.core.dao.customer.CustomerCorporateDAO;
import org.rta.core.dao.customer.CustomerDAO;
import org.rta.core.dao.finance.FinanceApproveDetailsDAO;
import org.rta.core.dao.finance.FinanceDetailsDAO;
import org.rta.core.dao.finance.FinanceHistoryDAO;
import org.rta.core.dao.finance.FinanceTokenDAO;
import org.rta.core.dao.finance.FinancerAppStatusDAO;
import org.rta.core.dao.finance.FinancerDAO;
import org.rta.core.dao.finance.VehicleFinanceDtlsDAO;
import org.rta.core.dao.office.RtaOfficeDAO;
import org.rta.core.dao.user.AddressDAO;
import org.rta.core.dao.user.UserDAO;
import org.rta.core.dao.vehicle.VahanDAO;
import org.rta.core.dao.vehicle.VehicleDAO;
import org.rta.core.dao.vehicle.VehicleDetailsDAO;
import org.rta.core.dao.vehicle.cms.VehicleClassDescDAO;
import org.rta.core.entity.applicant.CustCorporateDetailsEntity;
import org.rta.core.entity.applicant.CustIndividualDetailsEntity;
import org.rta.core.entity.finance.FinanceApproveDetailsEntity;
import org.rta.core.entity.finance.FinanceDetailsEntity;
import org.rta.core.entity.finance.FinanceHistoryEntity;
import org.rta.core.entity.finance.FinanceTokenEntity;
import org.rta.core.entity.finance.FinancerAppStatusEntity;
import org.rta.core.entity.finance.VehicleFinanceDtlstEntity;
import org.rta.core.entity.master.CountryEntity;
import org.rta.core.entity.master.DistrictEntity;
import org.rta.core.entity.master.MandalEntity;
import org.rta.core.entity.master.StateEntity;
import org.rta.core.entity.office.RtaOfficeEntity;
import org.rta.core.entity.user.AddressEntity;
import org.rta.core.entity.user.UserEntity;
import org.rta.core.entity.vehicle.VahanEntity;
import org.rta.core.entity.vehicle.VehicleDetailsEntity;
import org.rta.core.entity.vehicle.VehicleRCEntity;
import org.rta.core.entity.vehicle.cms.VehicleClassDescriptionEntity;
import org.rta.core.enums.OwnershipType;
import org.rta.core.enums.ServiceType;
import org.rta.core.enums.Status;
import org.rta.core.enums.UserType;
import org.rta.core.enums.master.FinanceType;
import org.rta.core.exception.FoundException;
import org.rta.core.exception.UserNotFoundException;
import org.rta.core.exception.VehicleRcNotFoundException;
import org.rta.core.helper.office.RTAOfficeHelper;
import org.rta.core.model.SaveUpdateResponse;
import org.rta.core.model.customer.CustMsgModel;
import org.rta.core.model.finance.FinanceApp;
import org.rta.core.model.finance.FinanceApproveRejectModel;
import org.rta.core.model.finance.FinanceModel;
import org.rta.core.model.finance.FinanceOtherServiceModel;
import org.rta.core.model.finance.FinancerModel;
import org.rta.core.model.master.ServiceMasterModel;
import org.rta.core.model.office.RTAOfficeModel;
import org.rta.core.model.sync.ApplicationFormDataModel;
import org.rta.core.model.sync.HPAHPTSyncModel;
import org.rta.core.model.user.AddressModel;
import org.rta.core.service.finance.FinanceApprovalService;
import org.rta.core.service.vehicle.VehicleService;
import org.rta.core.utils.DateUtil;
import org.rta.core.utils.ObjectsUtil;
import org.rta.core.utils.StringsUtil;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.HttpStatus;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import javassist.NotFoundException;

/**
 * This is for online finance Approval process. Steps: 1. Token generated by
 * dealer on behalf of customer. 2. Token generated by dealer given to one or
 * more financers. 3. Token used by financer to view the application. And a
 * record created in FinancerAppStatusEntity. and depending upon its response
 * its value gets changed to STEP2_FINANCER_APPROVED/STEP2_FINANCER_REJECTED 4.
 * Dealer can see all the finacers who approved the initial request in the DDL,
 * 5. One financer is selected by dealer and the status of that financer is
 * changed to STEP3_DEALER_CONFIRM/STEP3_DEALER_REFUSE. 6. once the application
 * status changes to STEP3_DEALER_CONFIRM , financer can again view and
 * accept/reject the final application Status then chnages to
 * STEP4_FINANCER_APPROVED/STEP4_FINANCER_REFUSE.
 * 
 * @author shivangi.gupta
 *
 */
@Service
public class FinanceApprovalServiceImpl implements FinanceApprovalService {
	
	private static final Logger log = Logger.getLogger(FinanceApprovalServiceImpl.class);

	@Autowired
	private FinanceTokenDAO financeDAO;

	@Autowired
	private FinanceTokenDAO financeTokenDAO;

	@Autowired
	private FinancerAppStatusDAO financeAppStatusDAO;

	@Autowired
	private UserDAO userDAO;

	@Autowired
	private VehicleDAO vehicleDAO;

	@Autowired
	private VehicleDetailsDAO vehicleDtlsDAO;
	
	@Autowired
	private VehicleClassDescDAO vehicleClassDescDAO;

	@Autowired
	private CustomerDAO customerDAO;

	@Autowired
	private CustomerCorporateDAO corpDAO;

	@Autowired
	private VehicleFinanceDtlsDAO vehicleFinanceDAO;

	@Autowired
	private AddressDAO addressDAO;

	@Autowired
	private FinanceHistoryDAO financeHistoryDAO;

	@Autowired
	private FinanceApproveDetailsDAO financeApproveDetailsDAO;

	@Autowired
	private VahanDAO vahanDAO;

	@Autowired
	RTAOfficeHelper rtaOfficeHelper;
	
	@Autowired
	RtaOfficeDAO rtaOfficeDAO;
	
	@Autowired
	private FinancerDAO financerDAO;
	
	@Autowired
	private FinanceDetailsDAO financeDtlsDAO;
	
	@Autowired
	private VehicleService vehicleService;
	
    @Value("${rta.step.finance}")
    private Integer currentStep;
    
	private static int PAYMENT_CASH = 1;
	private static int PAYMENT_CHEQUE = 2;

	@Override
	@Transactional
	public Map<String, String> getTokenForVehicle(Long vehiceRc, Long dealerId, Double quotationPrice) {
		log.info("getTokenForVehicle for: vhicleRc" + vehiceRc + " for dealerId" + dealerId);
		UserEntity userEntity = userDAO.findByUserId(dealerId);
		if (userEntity == null || userEntity.getUserType() != UserType.ROLE_DEALER)
			throw new IllegalArgumentException("Invalid userId");
		VehicleRCEntity vehicleRc = vehicleDAO.get(vehiceRc);
		if (vehicleRc == null)
			throw new IllegalArgumentException("Invalid VehicleRcID");
		FinanceTokenEntity financeTokenEntity = financeDAO.getTokenId(vehiceRc,
				ServiceType.FINANCE_NEW_REGISTARTION_SERVICE.getValue());
		DecimalFormat df = new DecimalFormat("#.00");
		String angleFormated = null;
		if (!ObjectsUtil.isNull(quotationPrice) && quotationPrice.doubleValue() != 0) {
		    angleFormated = df.format(quotationPrice);
		}
		if (financeTokenEntity == null) {
			financeTokenEntity = createNewFinanceTokenTbl(userEntity.getUserType(), vehiceRc,
					ServiceType.FINANCE_NEW_REGISTARTION_SERVICE, Double.parseDouble(angleFormated), "");
			// vehicleRc.setCurrentStep(currentStep);
		}
		HashMap<String, String> map = new HashMap();
		map.put("token_financer", financeTokenEntity.getTokenId());
		map.put("quotation_price", df.format(financeTokenEntity.getQuotationPrice()) + "");
		return map;
	}

	private FinanceTokenEntity createNewFinanceTokenTbl(UserType usertype, Long vehiceRcId, ServiceType serviceTyp,
			Double quotation, String appNum) {
		FinanceTokenEntity finaceToken = new FinanceTokenEntity();
		VehicleRCEntity vehicleRc = vehicleDAO.get(vehiceRcId);
		if (vehicleRc == null)
			throw new IllegalArgumentException("Invalid VehicleRcId");
		finaceToken.setCreatedBy(usertype.getLabel());
		finaceToken.setCreatedOn(DateUtil.toCurrentUTCTimeStamp());
		finaceToken.setDateOfTokenGen(DateUtil.toCurrentUTCTimeStamp());
		finaceToken.setRequesterType(usertype.getValue());
		finaceToken.setModifiedBy(usertype.getLabel());
		finaceToken.setModifiedOn(DateUtil.toCurrentUTCTimeStamp());

		log.info("generateToken for vehicleRcId " + vehiceRcId);
		String uniqueToken = "";
		switch (serviceTyp) {
		case FINANCE_NEW_REGISTARTION_SERVICE:
			log.info("generateToken for FINANCE_NEW_REGISTARTION_SERVICE " + vehiceRcId);
			if (quotation == null || quotation <= 0)
				throw new IllegalArgumentException("quotation prices are missing!!!!");
			uniqueToken = generateNewToken(vehicleRc, ServiceType.FINANCE_NEW_REGISTARTION_SERVICE);
			finaceToken.setServiceType(ServiceType.FINANCE_NEW_REGISTARTION_SERVICE.getValue());
			finaceToken.setAppStatus(Status.STEP1_BUYER_REQUEST.getValue());
			finaceToken.setQuotationPrice(quotation);
			break;
		case HPA:
			log.info("generateToken for FINANCE_HPA_SERVICE " + vehiceRcId);
			if (quotation == null || quotation <= 0)
				throw new IllegalArgumentException("quotation prices are missing!!!!");
			uniqueToken = appNum;
			finaceToken.setServiceType(ServiceType.HPA.getValue());
			finaceToken.setAppStatus(Status.STEP1_BUYER_REQUEST.getValue());
			finaceToken.setQuotationPrice(quotation);
			break;
		default:
			log.info("generateToken for HPT " + vehiceRcId);
			uniqueToken = appNum;
			finaceToken.setServiceType(serviceTyp.getValue());
			finaceToken.setAppStatus(Status.PENDING.getValue());
			break;
		}

		log.info("generatedToken for vehicleRcId is " + uniqueToken);

		finaceToken.setTokenId(uniqueToken + "");
		finaceToken.setVehicleRc(vehicleRc);
		financeTokenDAO.save(finaceToken);
		return finaceToken;
	}

	public String generateNewToken(VehicleRCEntity vehicleRcTbl, ServiceType serviceType) {
		// StringBuilder uniqueToken = new StringBuilder();
		// String dealerName =
		// vehicleRcTbl.getUserId().getFirstName().substring(0, 2);
		// String registrationCat = vehicleRcTbl.getRegCategory().getCode();
		// int ownershipType = vehicleRcTbl.getOwnershipType();
		String serviceCode = "";
		if (serviceType == ServiceType.FINANCE_NEW_REGISTARTION_SERVICE)
			serviceCode = "NRE";
		else if (serviceType == ServiceType.HPA)
			serviceCode = "HPA";
		else if (serviceType == ServiceType.HPT)
			serviceCode = "HPT";
		Long timestamp = DateUtil.toCurrentUTCTimeStamp();
		return new StringBuilder(serviceCode).append(timestamp).toString().toUpperCase();
	}

	@Transactional
	public void saveTokenForHPA(String tokenIdfromCitizen, String prNumber, Double quotationPrice) {

		VehicleRCEntity vehicleRc = vehicleDAO.getVehicleRc4Pr(prNumber);
		if (vehicleRc == null)
			throw new IllegalArgumentException("Invalid pr Number");
		FinanceTokenEntity financeTokenEntity = financeDAO.getFinanceTokenDetails(tokenIdfromCitizen, ServiceType.HPA.getValue());
		if (financeTokenEntity == null){
			financeTokenEntity = createNewFinanceTokenTbl(UserType.ROLE_CUSTOMER_IND, vehicleRc.getVehicleRcId(),
					ServiceType.HPA, quotationPrice, tokenIdfromCitizen);
		} else {
		    financeTokenEntity.setAppStatus(Status.STEP1_BUYER_REQUEST.getValue());
		}
		financeTokenDAO.saveOrUpdate(financeTokenEntity);
	}

	@Transactional
	public HashMap<String, String> getVehicleForToken(String tokenId, Long financeId) {
		FinanceTokenEntity financeTokenEntity = financeDAO.getVehicleRcIdFromToken(tokenId);
		if (financeTokenEntity == null){
			throw new IllegalArgumentException("Invalid token");
		}
		if(!(financeTokenEntity.getServiceType() == ServiceType.HPA.getValue() || financeTokenEntity.getServiceType() == ServiceType.FINANCE_NEW_REGISTARTION_SERVICE.getValue())){
		    throw new IllegalArgumentException("Invalid Application Number !!!");
		}
		        
		HashMap<String, String> map = null;
		if (Status.getStatus(financeTokenEntity.getVehicleRc().getTrStatus()) == Status.CANCELLED) {
		    log.info("application having tokenId : " + tokenId + " is cancelled ! ");
		    map = new HashMap<String, String>(1);
		    map.put("trStatus", Status.CANCELLED.getLabel());
		    return map;
		}
		UserEntity userEntity = userDAO.findByUserId(financeId);
		if (userEntity == null || userEntity.getUserType() != UserType.ROLE_ONLINE_FINANCER)
			throw new IllegalArgumentException("Invalid userId");
		
		FinancerAppStatusEntity financeAppEntity = financeAppStatusDAO.getFinancerAppFromToken(tokenId, userEntity);
		
		if (financeAppEntity == null && !(financeTokenEntity.getAppStatus() == Status.STEP4_FINANCER_APPROVED.getValue()
		        || financeTokenEntity.getAppStatus() == Status.STEP3_BUYER_CONFIRM.getValue() || financeTokenEntity.getAppStatus() == Status.STEP3_BUYER_REFUSE.getValue())){
			financeAppEntity = createFinanceAppTbl(financeId, tokenId, userEntity, ServiceType.FINANCE_NEW_REGISTARTION_SERVICE);
		}
		
		map = new HashMap<String, String>(10);
		if(ObjectsUtil.isNull(financeAppEntity)){
		    return map;
		}
		
		if (financeTokenEntity.getServiceType() == ServiceType.HPA.getValue())
			map.put("pr_number", financeTokenEntity.getVehicleRc().getPrNumber());
		map.put("vehicleRc", financeTokenEntity.getVehicleRc().getVehicleRcId() + "");
		if(financeTokenEntity.getAppStatus() == Status.STEP4_FINANCER_APPROVED.getValue() || 
		        financeTokenEntity.getAppStatus() == Status.STEP4_FINANCER_REJECTED.getValue()){
		    map.put("ApplicationStatus", Status.getLabel(financeTokenEntity.getAppStatus()));
		} else {
		    map.put("ApplicationStatus",
		            financeAppEntity != null ? Status.getLabel(financeAppEntity.getFinanceStatus()) : "");
		}
		map.put("serviceTypeId", financeTokenEntity.getServiceType() + "");
		map.put("serviceCode", ServiceType.getServiceType(financeTokenEntity.getServiceType()).getCode());
		map.put("serviceTypeLabel", ServiceType.getLabel(financeTokenEntity.getServiceType()));
		map.put("quotationPrice", financeTokenEntity.getQuotationPrice() + "");
		return map;
	}

	private FinancerAppStatusEntity createFinanceAppTbl(Long financerId, String tokenId, UserEntity userEntity,
			ServiceType serviceType) {
		UserEntity financer = userDAO.findByUserId(financerId);
		if (financer == null || financer.getUserType() != UserType.ROLE_ONLINE_FINANCER)
			throw new IllegalArgumentException("invalid finnacer!!");
		FinancerAppStatusEntity financeAppEntity = new FinancerAppStatusEntity();
		financeAppEntity = new FinancerAppStatusEntity();
		financeAppEntity.setCreatedBy(userEntity.getUserName());
		financeAppEntity.setCreatedOn(DateUtil.toCurrentUTCTimeStamp());
		financeAppEntity.setRequestedDate(DateUtil.toCurrentUTCTimeStamp());

		financeAppEntity.setModifiedBy(userEntity.getUserName());
		financeAppEntity.setModifiedOn(DateUtil.toCurrentUTCTimeStamp());
		financeAppEntity.setTokenId(tokenId);
		financeAppEntity.setStatusChangedDate(DateUtil.toCurrentUTCTimeStamp());

		switch (serviceType) {

		case FINANCE_NEW_REGISTARTION_SERVICE:
			financeAppEntity.setFinanceStatus(Status.STEP2_FINANCER_PENDING.getValue());
			financeAppEntity.setFinancerId(financer);
			break;
		case HPA:
			financeAppEntity.setFinanceStatus(Status.STEP2_FINANCER_PENDING.getValue());
			financeAppEntity.setFinancerId(financer);
			break;

		default:
			financeAppEntity.setFinanceStatus(Status.PENDING.getValue());
			financeAppEntity.setFinancerId(financer);
			break;

		}
		financeAppStatusDAO.save(financeAppEntity);
		return financeAppEntity;

	}

	@Transactional
	public HashMap<String, Object> getAppList4Financer(Long financeId, String tokenId, List<Integer> status, ServiceType service, String rtaOffice,
			Integer perPageRecords, Integer pageNumber) {
		log.info(":::getAppList4Financer:::start:::::: ");
		UserEntity userEntity = userDAO.findByUserId(financeId);
		if (userEntity == null || userEntity.getUserType() != UserType.ROLE_ONLINE_FINANCER)
			throw new IllegalArgumentException("Invalid userId");
		HashMap<String, Object> map = new HashMap<String, Object>();
		List<FinanceApp> financeApps = new ArrayList<>();
		FinanceApp finaApp = null;
		FinanceTokenEntity financeTokenEnity;
		if(!StringsUtil.isNullOrEmpty(tokenId)){
		    FinancerAppStatusEntity entity = financeAppStatusDAO.getFinancerApp4Token(tokenId, userEntity.getUserId());
			if(!ObjectsUtil.isNull(entity)){
				finaApp = getDetailsOfCust(tokenId);
				if(!ObjectsUtil.isNull(finaApp)){
                    finaApp.setAppStatus(Status.getLabel(entity.getFinanceStatus()));
                }
				financeApps.add(finaApp);
				map.put("count", new Integer(1));
				map.put("data", financeApps);
				return map;
			}
		}
		List<FinancerAppStatusEntity> applicationList = financeAppStatusDAO.getFinancerAppListMultiStatus(userEntity,
				status, perPageRecords, pageNumber);
		for (FinancerAppStatusEntity entity : applicationList) {
			financeTokenEnity = financeTokenDAO.getVehicleRcIdFromToken(entity.getTokenId());
			if (financeTokenEnity == null){
			    log.error("Finance Token Not found in financeTokenEnity : "+entity.getTokenId());
			    continue;
			}
			/*if(financeTokenEnity.getVehicleRc().getTrStatus() == Status.CANCELLED.getValue()) {
			    log.info("Application is in CANCELLED state for financeTokenEnity : "+entity.getTokenId());
                continue;
			}*/
			if ((service != null && financeTokenEnity.getServiceType() != service.getValue()) || (rtaOffice != null
					&& !rtaOffice.equalsIgnoreCase("")
					&& !rtaOffice.equalsIgnoreCase(financeTokenEnity.getVehicleRc().getRtaOfficeId().getCode()))){
			        log.info("Continue for=> service : " + service.getValue() + " rtaOffice " + rtaOffice);
				    continue;
				}
			try {
				finaApp = getDetailsOfCust(entity.getTokenId());
				if(!ObjectsUtil.isNull(finaApp)){
				    finaApp.setAppStatus(Status.getLabel(entity.getFinanceStatus()));
				}
			} catch (IllegalArgumentException e) {
				log.error(e.getMessage());
				continue;
			}

			financeApps.add(finaApp);
		}
		Long count = financeAppStatusDAO.getCountFinancerAppListMultiStatus(userEntity, status);
		map.put("count", count);
		map.put("data", financeApps);
		log.info(":::getAppList4Financer::end::::: " + map);
		return map;
	}
	
	@Override
	@Transactional
	public HashMap<String, Object> getAppList4FinancerNew(Long financeId, String tokenId, List<Integer> status, ServiceType service, String rtaOffice,
	        Integer perPageRecords, Integer pageNumber) {
	    log.info(":::getAppList4Financer:::start:::::: ");
	    UserEntity userEntity = userDAO.findByUserId(financeId);
	    if (userEntity == null || userEntity.getUserType() != UserType.ROLE_ONLINE_FINANCER)
	        throw new IllegalArgumentException("Invalid userId");
	    HashMap<String, Object> map = new HashMap<String, Object>();
	    List<FinanceApp> financeApps = new ArrayList<>();
	    FinanceApp finaApp = null;
	    FinanceTokenEntity financeTokenEnity;
	    if(!StringsUtil.isNullOrEmpty(tokenId)){
	        if(!ObjectsUtil.isNull(financeAppStatusDAO.getFinancerApp4Token(tokenId, userEntity.getUserId()))){
	            finaApp = getDetailsOfCust(tokenId);
	            financeApps.add(finaApp);
	            map.put("count", new Integer(1));
	            map.put("data", financeApps);
	            return map;
	        }
	    }
	    Long rtaOfficeId = null;
	    if (!StringsUtil.isNullOrEmpty(rtaOffice)) {
	       rtaOfficeId = rtaOfficeDAO.getRtaOfficeDetailsByCode(rtaOffice).getRtaOfficeId();
	    }
	    List<FinancerAppStatusEntity> applicationList = financeAppStatusDAO.getFinancerAppListMultiStatusNew(userEntity,
	            status, perPageRecords, pageNumber, rtaOfficeId, service);
	    for (FinancerAppStatusEntity entity : applicationList) {
	        financeTokenEnity = financeTokenDAO.getVehicleRcIdFromToken(entity.getTokenId());
	        if (financeTokenEnity == null){
	            log.error("Finance Token Not found in financeTokenEnity : "+entity.getTokenId());
	            continue;
	        }
	        if ((service != null && financeTokenEnity.getServiceType() != service.getValue()) || (rtaOffice != null
	                && !rtaOffice.equalsIgnoreCase("")
	                && !rtaOffice.equalsIgnoreCase(financeTokenEnity.getVehicleRc().getRtaOfficeId().getCode()))){
	            log.info("Continue for=> service : " + service.getValue() + " rtaOffice " + rtaOffice);
	            continue;
	        }
	        try {
	            finaApp = getDetailsOfCust(entity.getTokenId());
	            if(!ObjectsUtil.isNull(finaApp)){
	                finaApp.setAppStatus(Status.getLabel(entity.getFinanceStatus()));
	            }
	        } catch (IllegalArgumentException e) {
	            log.error(e.getMessage());
	            continue;
	        }

	        financeApps.add(finaApp);
	    }
	    Integer count = financeAppStatusDAO.getCountFinancerAppListMultiStatusNew(userEntity, status, rtaOfficeId, service);
	    map.put("count", count);
	    map.put("data", financeApps);
	    log.info(":::getAppList4Financer::end::::: " + map);
	    return map;
	}

	@Transactional
	public FinanceApp getApp4Financer(Long financeId, List<Integer> status, String tokenId) {
		log.info(":::getApp4Financer:::start:::::: " + financeId);
		UserEntity userEntity = userDAO.findByUserId(financeId);
		if (userEntity == null || userEntity.getUserType() != UserType.ROLE_ONLINE_FINANCER)
			throw new IllegalArgumentException("Invalid userId");
		FinancerAppStatusEntity application = financeAppStatusDAO.getFinancerApp4Token(tokenId, financeId);
		log.info("DASHBOARD API................: for status id In( " + status + " ),tokenId: " + tokenId
				+ " and financer id: " + financeId);
		if (application == null)
			throw new IllegalArgumentException("Incorrect TokenId!!!");
		if (!status.contains(application.getFinanceStatus()))
			throw new IllegalArgumentException("This token cant be processed by this financier for existing status");
		log.info("::getApp4Financer::::::end::");
		FinanceApp finApp = getDetailsOfCust(application.getTokenId());
		finApp.setAppStatus(Status.getLabel(application.getFinanceStatus()));
		return finApp;
	}

	public FinanceApp getDetailsOfCust(String tokenId) {
		FinanceApp financeApp = new FinanceApp();
		VehicleRCEntity vehicle = null;
		log.info("::::getDetailsOfCust::::::: token " + tokenId);

		FinanceTokenEntity tokenEntity = financeTokenDAO.getVehicleRcIdFromToken(tokenId);
		if (tokenEntity == null)
			throw new IllegalArgumentException("Token is invalid!!" + tokenId);
		log.info("Service Type " + ServiceType.getLabel(tokenEntity.getServiceType()));
		vehicle = tokenEntity.getVehicleRc();
		if (vehicle == null)
			throw new IllegalArgumentException("VehicleRc is invalid!!" + tokenEntity.getVehicleRc());
		financeApp.setServiceTypeId(tokenEntity.getServiceType());
		financeApp.setServiceTypeLabel(ServiceType.getLabel(tokenEntity.getServiceType()));
		financeApp.setServiceCode(ServiceType.getServiceType(tokenEntity.getServiceType()).getCode());
		financeApp.setQuotationPrice(tokenEntity.getQuotationPrice());
		financeApp.setAppStatus(Status.getLabel(tokenEntity.getAppStatus()));

		/*
		 * FinanceOtherServiceEntity
		 * financeOtherService=financeOtherServDAO.getFromAppNum(tokenId);
		 * if(financeOtherService==null) throw new IllegalArgumentException(
		 * "financier Approval request not yet applied!!!");
		 * vehicle=financeOtherService.getVehicleRc();
		 * financeApp.setServiceTypeId(financeOtherService.getServiceType());
		 * financeApp.setServiceCode(ServiceType.getServiceType(
		 * financeOtherService.getServiceType()).getCode());
		 * financeApp.setServiceTypeLabel(ServiceType.getLabel(
		 * financeOtherService.getServiceType()));
		 * financeApp.setAppStatus(Status.getLabel(financeOtherService.
		 * getAppStatus()));
		 */

		RtaOfficeEntity officeEntity = vehicle.getRtaOfficeId();
		if (officeEntity == null)
			throw new IllegalArgumentException("RTA office code not found!!");
		VehicleDetailsEntity vehicleDtls = vehicleDtlsDAO.getByVehicleRcId(vehicle.getVehicleRcId());
		if (vehicleDtls == null)
			throw new IllegalArgumentException(
					"Vehicle Details not found for vehicleRC" + vehicle.getVehicleRcId() + "!!");
		if (vehicleDtls.getVehicleSubClass().equalsIgnoreCase(""))
			throw new IllegalArgumentException("Vehicle Sub class not found!!");
		VehicleClassDescriptionEntity vehicleDes = vehicleClassDescDAO
				.getByVehiclClassDesCode(vehicleDtls.getVehicleSubClass());
		if (vehicleDes == null)
			throw new IllegalArgumentException("Vehicle Sub class Desc not found!!");
		OwnershipType type = OwnershipType.getOwnershipType(vehicle.getOwnershipType());
		if (type == null)
			throw new IllegalArgumentException("Customer Type is invalid!!");
		VahanEntity vahan = vahanDAO.getByChassisNumber(vehicle.getChassisNumber());
		if (vahan == null)
			throw new IllegalArgumentException("Vahan not found");

		financeApp.setClassType(vehicleDes.getDescription());
		financeApp.setRtaOfficeId(vehicle.getRtaOfficeId().getRtaOfficeId());
		financeApp.setRtaOfficeCode(vehicle.getRtaOfficeId().getCode());
		financeApp.setRtaOfficeName(officeEntity.getName());
		financeApp.setTokenId(tokenId);
		financeApp.setMakersClass(vahan.getMakersClass());
		financeApp.setAppNo(vehicle.getVehicleRcId());

		switch (type) {
		case INDIVIDUAL:
			CustIndividualDetailsEntity custIndi = customerDAO.getByVehicleRcId(vehicle.getVehicleRcId());
			if (custIndi == null)
				return null;

			AddressModel addreModel = getAddressForUser(custIndi.getCustIndDtlId());
			financeApp.setFirstName(custIndi.getFirstName());
			financeApp.setTokenId(tokenId);
			financeApp.setLastName(custIndi.getSurName());
			financeApp.setFatherName(custIndi.getFatherName());
			financeApp.setAddress(addreModel);

			break;
		case POLICE:
		case COMPANY:
		case STU_VEHICLES:
		case ORGANIZATION:
			CustCorporateDetailsEntity company = corpDAO.getByVehicleRcId(vehicle.getVehicleRcId());
			if (company == null)
				break;
			addreModel = getAddressForUser(company.getCustCorpDtlsId());
			financeApp.setFirstName(company.getCompanyName());
			financeApp.setTokenId(tokenId);
			financeApp.setAddress(addreModel);
		}
		return financeApp;
	}

	@Transactional
	public String approveRejectFinanceRequest(String tokenId, Status status, Long financerId) {
		UserEntity userEntity = userDAO.findByUserId(financerId);
		if (userEntity == null || userEntity.getUserType() != UserType.ROLE_ONLINE_FINANCER)
			throw new IllegalArgumentException("Invalid userId");

		FinanceTokenEntity financeTokenEntity = financeDAO.getVehicleRcIdFromToken(tokenId);
		if (financeTokenEntity == null)
			throw new IllegalArgumentException("Invalid tokenId");
		if (status == Status.STEP2_FINANCER_ACCEPTED)
			financeTokenEntity.setAppStatus(Status.STEP2_FINANCER_ACCEPTED.getValue());
		FinancerAppStatusEntity financeAppEntity = financeAppStatusDAO.getFinancerAppFromToken(tokenId, userEntity);

		if (financeAppEntity == null)
			throw new IllegalArgumentException(
					"This application is not yet opened for the financer : " + userEntity.getUserName());
		if (financeAppEntity.getFinanceStatus() != Status.STEP2_FINANCER_PENDING.getValue())
			throw new IllegalArgumentException(
					"The status of financer application must be financerPending to be able Approve or Reject");

		financeAppEntity.setFinanceStatus(Status.STEP2_FINANCER_PENDING.getValue());
		financeAppEntity.setStatusChangedDate(DateUtil.toCurrentUTCTimeStamp());
		financeAppEntity.setFinancerId(userEntity);
		financeAppEntity.setModifiedBy(userEntity.getUserName());
		financeAppEntity.setModifiedOn(DateUtil.toCurrentUTCTimeStamp());
		financeAppEntity.setTokenId(tokenId);

		if (status == Status.APPROVED || status == Status.STEP2_FINANCER_ACCEPTED)
			financeAppEntity.setFinanceStatus(Status.STEP2_FINANCER_ACCEPTED.getValue());
		else if (status == Status.REJECTED || status == Status.STEP2_FINANCER_REJECTED)
			financeAppEntity.setFinanceStatus(Status.STEP2_FINANCER_REJECTED.getValue());
		financeAppStatusDAO.update(financeAppEntity);
//		CustMsgModel msg = setMsgModel(financeTokenEntity, Status.STEP2_FINANCER_ACCEPTED, userEntity);
		return "success!!";

	}

	@Transactional
	public List<FinancerModel> getFinancersListForVehicle(Long vehicleRcId) {
		List<FinancerAppStatusEntity> financerAppList = financeAppStatusDAO.getAppsForStatus(vehicleRcId);
		if (financerAppList == null)
			return null;

		FinancerModel financeApp = null;
		AddressModel addModel = null;
		List<FinancerModel> financeApps = new ArrayList<>();
		List<Integer> statuses = new ArrayList<>();
		statuses.add(Status.STEP2_FINANCER_ACCEPTED.getValue());
		statuses.add(Status.STEP3_BUYER_CONFIRM.getValue());
		// statuses.add(Status.STEP3_BUYER_REFUSE.getValue());
		statuses.add(Status.STEP4_FINANCER_APPROVED.getValue());
		statuses.add(Status.STEP4_FINANCER_REJECTED.getValue());

		for (FinancerAppStatusEntity entity : financerAppList) {
			if (!statuses.contains(entity.getFinanceStatus()))
				continue;
			financeApp = new FinancerModel();
			addModel = new AddressModel();
			financeApp.setFinancerId(entity.getFinancerId().getUserId());
			financeApp.setFinancerName(entity.getFinancerId().getInstitutionName());
			financeApp.setFinancierAddress(getAddressForUser(entity.getFinancerId().getUserId()));
			financeApp.setStatus(Status.getStatus(entity.getFinanceStatus()).getLabel());
			financeApp.setSanctionLetterUrl(entity.getSanctionletter());
			financeApps.add(financeApp);
		}
		return financeApps;
	}

	@Transactional
	public List<FinancerModel> getFinancersListForToken(String tokenId) {
		List<FinancerAppStatusEntity> financerAppList = financeAppStatusDAO.getFinancerAppList4Token(tokenId);
		if (financerAppList == null)
			return null;
		FinancerModel financeApp = null;
		AddressModel addModel = null;

		List<Integer> statuses = new ArrayList<>();
		statuses.add(Status.STEP2_FINANCER_ACCEPTED.getValue());
		statuses.add(Status.STEP3_BUYER_CONFIRM.getValue());
		// statuses.add(Status.STEP3_BUYER_REFUSE.getValue());
		statuses.add(Status.STEP4_FINANCER_APPROVED.getValue());
		statuses.add(Status.STEP4_FINANCER_REJECTED.getValue());
		List<FinancerModel> financeApps = new ArrayList<>();
		for (FinancerAppStatusEntity entity : financerAppList) {
			if (!statuses.contains(entity.getFinanceStatus()))
				continue;
			financeApp = new FinancerModel();
			addModel = new AddressModel();
			financeApp.setFinancerId(entity.getFinancerId().getUserId());
			financeApp.setFinancerName(entity.getFinancerId().getFirstName());
			financeApp.setFinancierAddress(getAddressForUser(entity.getFinancerId().getUserId()));
			financeApp.setSanctionLetterUrl(entity.getSanctionletter());
			financeApp.setStatus(Status.getStatus(entity.getFinanceStatus()).getLabel());
			financeApps.add(financeApp);
		}
		return financeApps;
	}

	@Transactional
	public void saveDealerResponse(Long vehicleRcId, Long financerId, Long dealerId) {
		UserEntity userEntity = userDAO.findByUserId(financerId);
		if (userEntity == null)
			throw new IllegalArgumentException("Invalid fiancerId");

		UserEntity dealerEntity = userDAO.findByUserId(dealerId);
		if (dealerEntity == null)
			throw new IllegalArgumentException("Invalid dealerId");

		FinanceTokenEntity financeToken = financeTokenDAO.getTokenId(vehicleRcId,
				ServiceType.FINANCE_NEW_REGISTARTION_SERVICE.getValue());
		if (financeToken == null || StringsUtil.isNullOrEmpty(financeToken.getTokenId()))
			throw new IllegalArgumentException("Financer Token not generated");

		financeToken.setAppStatus(Status.STEP3_BUYER_CONFIRM.getValue());
		List<FinancerAppStatusEntity> financeAppEntities = financeAppStatusDAO
				.getFinancerAppList4Token(financeToken.getTokenId());

		if (financeAppEntities == null)
			throw new IllegalArgumentException("This Application is not meant for this financer");

		for (FinancerAppStatusEntity appStatus : financeAppEntities) {
			if (appStatus.getFinancerId().getUserId().equals(financerId)){
				appStatus.setFinanceStatus(Status.STEP3_BUYER_CONFIRM.getValue());
			} else {
			    appStatus.setFinanceStatus(Status.STEP3_BUYER_REFUSE.getValue());
			}
			appStatus.setStatusChangedDate(DateUtil.toCurrentUTCTimeStamp());
			appStatus.setModifiedBy(dealerEntity.getUserName());
			appStatus.setModifiedOn(DateUtil.toCurrentUTCTimeStamp());
			financeAppStatusDAO.update(appStatus);
		}

	}

	@Transactional
	@Override
	public void saveCitizenResponse(String appNum, Long financerId, Long dealerId) throws FoundException {
		UserEntity userEntity = userDAO.findByUserId(financerId);
		if (userEntity == null) {
			log.error("Invalid fiancerId");
			throw new IllegalArgumentException("Invalid fiancerId");
		}

		UserEntity dealerEntity = userDAO.findByUserId(dealerId);
		if (dealerEntity == null) {
			log.error("Invalid Buyer");
			throw new IllegalArgumentException("Invalid Buyer");
		}

		FinanceTokenEntity financeToken = financeTokenDAO.getVehicleRcIdFromToken(appNum);
		if (financeToken == null || StringsUtil.isNullOrEmpty(financeToken.getTokenId())) {
			log.error("Financer Token not generated");
			throw new IllegalArgumentException("Financer Token not generated");
		}

		if (financeToken.getAppStatus() == Status.STEP3_BUYER_CONFIRM.getValue()) {
			log.error("Financer already selected !!!");
			throw new FoundException("Financer already selected !!!");
		}

		financeToken.setAppStatus(Status.STEP3_BUYER_CONFIRM.getValue());
		List<FinancerAppStatusEntity> financeAppEntities = financeAppStatusDAO
				.getFinancerAppList4Token(financeToken.getTokenId());

		if (financeAppEntities == null) {
			log.error("This Application is not meant for this financer");
			throw new IllegalArgumentException("This Application is not meant for this financer");
		}

		for (FinancerAppStatusEntity appStatus : financeAppEntities) {
			if (appStatus.getFinancerId().getUserId().equals(financerId)){
			    appStatus.setFinanceStatus(Status.STEP3_BUYER_CONFIRM.getValue());
			} else {
			    appStatus.setFinanceStatus(Status.STEP3_BUYER_REFUSE.getValue());
			}
			appStatus.setStatusChangedDate(DateUtil.toCurrentUTCTimeStamp());
			appStatus.setModifiedBy(dealerEntity.getUserName());
			appStatus.setModifiedOn(DateUtil.toCurrentUTCTimeStamp());
			financeAppStatusDAO.update(appStatus);
		}

	}

	@Transactional
	public String approveRejectFinalFinances(String tokenId, Status status, Long financerId,
			FinanceModel financeModel) {

		if (!(Status.STEP4_FINANCER_APPROVED == status || Status.STEP4_FINANCER_REJECTED == status))
			throw new IllegalArgumentException("Invalid status");

		UserEntity userEntity = userDAO.findByUserId(financerId);
		if (userEntity == null || userEntity.getUserType() != UserType.ROLE_ONLINE_FINANCER)
			throw new IllegalArgumentException("Invalid userId");

		FinanceTokenEntity financeToken = financeTokenDAO.getVehicleRcIdFromToken(tokenId);
		if (financeToken == null)
			throw new IllegalArgumentException("Invalid Token ID");
		if (status == Status.STEP4_FINANCER_APPROVED && financeModel == null)
			throw new IllegalArgumentException("Financed details must not be empty while Approval!!");
		if (status == Status.STEP4_FINANCER_APPROVED
				&& (financeModel.getAmount() == null || financeToken.getQuotationPrice() == null
						|| financeModel.getAmount().compareTo(financeToken.getQuotationPrice()) > 0))
			throw new IllegalArgumentException("Quotation price must be more than or equal to financer Amount");

		FinancerAppStatusEntity financeAppEntity = financeAppStatusDAO.getFinancerAppFromToken(tokenId, userEntity);
		if (financeAppEntity == null || !financeAppEntity.getFinancerId().getUserId().equals(financerId))
			throw new IllegalArgumentException("This Application is not meant for this financer");

		if (financeAppEntity.getFinanceStatus() != Status.STEP3_BUYER_CONFIRM.getValue()) {
			throw new IllegalArgumentException("This Application is not yet Confirmed by the Buyer");
		}

		financeToken.setAppStatus(status.getValue());
		financeAppEntity.setAgreementletter(financeModel.getAgreementLetterurl());
		financeAppEntity.setFinanceStatus(status.getValue());
		financeAppEntity.setStatusChangedDate(DateUtil.toCurrentUTCTimeStamp());
		financeAppEntity.setModifiedBy(userEntity.getUserName());
		financeAppEntity.setModifiedOn(DateUtil.toCurrentUTCTimeStamp());
		financeAppStatusDAO.update(financeAppEntity);
		if (status == Status.STEP4_FINANCER_APPROVED) {
			VehicleFinanceDtlstEntity vehicleFinanceDtlstEntity = new VehicleFinanceDtlstEntity();
			vehicleFinanceDtlstEntity.setCreatedBy(userEntity.getUserName());
			vehicleFinanceDtlstEntity.setCreatedOn(DateUtil.toCurrentUTCTimeStamp());
			vehicleFinanceDtlstEntity.setModifiedBy(userEntity.getUserName());
			vehicleFinanceDtlstEntity.setModifiedOn(DateUtil.toCurrentUTCTimeStamp());
			vehicleFinanceDtlstEntity.setDateOfAgreement(financeModel.getDateOfAgreement());
			vehicleFinanceDtlstEntity.setFinanceAmount(financeModel.getAmount());
			vehicleFinanceDtlstEntity.setFinanceEmi(financeModel.getEmi());
			vehicleFinanceDtlstEntity.setFinancerBId(0l);
			vehicleFinanceDtlstEntity.setFinancerId(financerId);
			vehicleFinanceDtlstEntity.setFinancerMode(FinanceType.ONLINE.getId());
			vehicleFinanceDtlstEntity.setFinanceTerminated(false);
			vehicleFinanceDtlstEntity.setTenure(financeModel.getTenure());
			vehicleFinanceDtlstEntity.setVehicleRcId(financeToken.getVehicleRc());
			vehicleFinanceDtlstEntity.setIntrestRate(financeModel.getIntrestRate());
			vehicleFinanceDtlstEntity.setPaymentMode(financeModel.getPaymentMode());
			vehicleFinanceDtlstEntity.setChequeNo(financeModel.getChequeNo());
			vehicleFinanceDtlstEntity.setEndDt(financeModel.getEndDt());
			vehicleFinanceDtlstEntity.setRtoApproved(Status.PENDING.getValue());
			vehicleFinanceDAO.save(vehicleFinanceDtlstEntity);
		}

//		CustMsgModel custMsgModel = setMsgModel(financeToken, status, userEntity);
		return "updated success";

	}

	@Transactional
	public CustMsgModel setMsgModel(String financeTok, Status statusType, Long  financerId) {
		log.info(":::setMsgModel::::start:::::::");
		CustMsgModel msgModel = null;
		CustIndividualDetailsEntity cust = null;
		CustCorporateDetailsEntity company = null;
		FinanceTokenEntity financeToken =financeTokenDAO.getVehicleRcIdFromToken(financeTok);
		UserEntity financer=userDAO.findByUserId(financerId);
		if(financer==null || financer.getUserType()!=UserType.ROLE_ONLINE_FINANCER)
			throw new IllegalArgumentException("Invalid financerId!");
		if(financeToken==null)
			throw new IllegalArgumentException("Finance Token not found!!");
		VehicleRCEntity vehicleRc = financeToken.getVehicleRc();
		
		VahanEntity vahan = vahanDAO.getByChassisNumber(financeToken.getVehicleRc().getChassisNumber());
		if (vahan == null)
			throw new IllegalArgumentException("Vahan not found");
		FinancerAppStatusEntity finaAppStatus=financeAppStatusDAO.getFinancerApp4Token(financeToken.getTokenId(), financer.getUserId());
		if(finaAppStatus==null)
			throw new IllegalArgumentException("Financer Record for this token not found!!");
		String name = "";
		String email = "";
		String mobNo = "";
		if (vehicleRc.getOwnershipType() == OwnershipType.INDIVIDUAL.getId()) {
			cust = customerDAO.getByVehicleRcId(vehicleRc.getVehicleRcId());
			name = cust.getDisplayName();
			email = cust.getEmailId();
			mobNo = cust.getMobileNo();
		}
		if (vehicleRc.getOwnershipType() == OwnershipType.COMPANY.getId()
				|| vehicleRc.getOwnershipType() == OwnershipType.POLICE.getId()
				|| vehicleRc.getOwnershipType() == OwnershipType.STU_VEHICLES.getId()
				|| vehicleRc.getOwnershipType() == OwnershipType.ORGANIZATION.getId()) {
			company = corpDAO.getByVehicleRcId(vehicleRc.getVehicleRcId());
			name = company.getDisplayName();
            email = company.getEmail();
            mobNo = company.getMobile();
		}
		String msg = "";
		StringBuilder mailContent = null;
		String sanctionURL=finaAppStatus.getSanctionletter()==null || finaAppStatus.getSanctionletter().equals("")?null:finaAppStatus.getSanctionletter();
		String agreemnetURL=finaAppStatus.getAgreementletter()==null || finaAppStatus.getAgreementletter().equals("")?null:finaAppStatus.getAgreementletter();
		switch (statusType) {
		case STEP2_FINANCER_ACCEPTED:
			msgModel = new CustMsgModel();
			msgModel.setCustName(name);
			msgModel.setMobileNo(mobNo + "," + vehicleRc.getUserId().getMobile());
//			msgModel.setCc(vehicleRc.getUserId().getEmail());
			msg = "Dear " + name + " , " + " " + financer.getInstitutionName()
					+ " has accepted the request for giving finance for the vehicle " + vahan.getMakersClass()
					+ " . Please accept the financier's offer by accessing the application so that your application will be further processed.";

			mailContent = new StringBuilder("<html><table><tr><td>Dear ").append(name).append(" ,")
					.append(financer.getInstitutionName()).append(" has accepted the request for giving finance for the vehicle ")
					.append(vahan.getMakersClass())
					.append(". Please accept the financier's offer by accessing the application so that your application will be further processed.");
					if(sanctionURL!=null){
						mailContent=mailContent.append("Please click below link for Sanction letter.")
					.append("</td></tr><tr><td><a href='")
					.append(sanctionURL).append("'>").append(sanctionURL)
					.append("</a></td></tr>");
					}
			mailContent=mailContent.append("</td></tr><tr>Thank You</tr><tr>AP_Road Transport</tr></table></html>");
			msgModel.setSmsMsg(msg);
			msgModel.setTo(email);
			msgModel.setVehicleRcId(vehicleRc.getVehicleRcId() + "");
			msgModel.setMailContent(mailContent.toString());
			msgModel.setSubject("Financer response Accepted");
			break;
		case STEP2_FINANCER_REJECTED:
			break;
		case STEP3_BUYER_CONFIRM:
			break;
		case STEP3_BUYER_REFUSE:
			break;
		case STEP4_FINANCER_APPROVED:
			msg = "Dear " + name + " , " + " " + financer.getInstitutionName()
					+ " has accepted the request for giving finance for the vehicle " + vahan.getMakersClass()
					+ " . Please contact your dealer for continuing online registration";

			mailContent = new StringBuilder("<tr><td>Dear ").append(name).append(" ,")
					.append(financer.getInstitutionName()).append(" has accepted the request for giving finance for the")
					.append(vahan.getMakersClass())
					.append(". Please contact your dealer for doing online registration.");
			if (agreemnetURL != null) {
				mailContent = mailContent.append("Please click below link for Agreement letter.")
						.append("</td></tr><tr><td><a href='").append(agreemnetURL).append("'>").append(agreemnetURL).append("</a></td></tr>");
			}
			mailContent = mailContent.append("</td></tr><tr>Thank You</tr><tr>AP_Road Transport</tr></table>");
			msgModel = new CustMsgModel();
			msgModel.setCustName(name);
			msgModel.setMobileNo(mobNo + "," + vehicleRc.getUserId().getMobile());
//			msgModel.setCc(vehicleRc.getUserId().getEmail());
			msgModel.setSmsMsg(msg);
			msgModel.setTo(email);
			msgModel.setVehicleRcId(vehicleRc.getVehicleRcId() + "");
			msgModel.setMailContent(mailContent.toString());
			msgModel.setSubject("Financer response Accepted");
			break;
		case STEP4_FINANCER_REJECTED:
			msg = "Dear " + name + " , " + " " + financer.getInstitutionName()
					+ " has rejected the request for giving finance for the " + vahan.getMakersClass();

			mailContent = new StringBuilder("<tr><td>Dear ").append(name).append(" ,")
					.append(financer.getInstitutionName()).append(" has Rejected the finance request for the vehicle ")
					.append(vahan.getMakersClass())
					.append("</td></tr><tr>Thank You</tr><tr>AP_Road Transport</tr></table>");
			msgModel = new CustMsgModel();
			msgModel.setCustName(name);
			msgModel.setMobileNo(mobNo + "," + vehicleRc.getUserId().getMobile());
//			msgModel.setCc(vehicleRc.getUserId().getEmail());
			msgModel.setSmsMsg(msg);
			msgModel.setTo(email);
			msgModel.setVehicleRcId(vehicleRc.getVehicleRcId() + "");
			msgModel.setMailContent(msg);
			msgModel.setSubject("Financer response REJECTED");
			break;
		}
		log.info(":::setMsgModel::::end:::::::");
		return msgModel;
	}

	
	@Transactional
	public Integer getServiceCode(String appNo){
	    Integer serviceTypeCode= null;
	    FinanceTokenEntity financeToken = financeTokenDAO.getVehicleRcIdFromToken(appNo);
	    if(!ObjectsUtil.isNull(financeToken)){
	        serviceTypeCode= financeToken.getServiceType() ;
	    }
	    return serviceTypeCode;
	}
	
	
    @Transactional
    public CustMsgModel setMsgModelOTD(String appNo, Status statusType, Long financerId, ApplicationFormDataModel applicationFormDataModel, String token) throws Exception{
        log.info(":::       setMsgModelOTD     ::::start:::::::");
        CustMsgModel msgModel = null;
        if (applicationFormDataModel.getFormCode().equalsIgnoreCase("otd_form")) {
            try {
                String formData = applicationFormDataModel.getFormData();
                String name = "";
                String email = "";
                String mobNo = "";

                JSONObject obj = new JSONObject(formData);
                name = obj.getString("displayName");
                email = obj.getString("emailId");
                mobNo = obj.getString("mobileNo");

                FinanceTokenEntity financeToken = financeTokenDAO.getVehicleRcIdFromToken(appNo);
                UserEntity financer = userDAO.findByUserId(financerId);
                if (financer == null || financer.getUserType() != UserType.ROLE_ONLINE_FINANCER)
                    throw new IllegalArgumentException("Invalid financerId!");
                if (financeToken == null)
                    throw new IllegalArgumentException("Finance Token not found!!");
                VehicleRCEntity vehicleRc = financeToken.getVehicleRc();

                VahanEntity vahan = vahanDAO.getByChassisNumber(financeToken.getVehicleRc().getChassisNumber());
                if (vahan == null)
                    throw new IllegalArgumentException("Vahan not found");
                FinancerAppStatusEntity finaAppStatus = financeAppStatusDAO.getFinancerApp4Token(financeToken.getTokenId(), financer.getUserId());
                if (finaAppStatus == null)
                    throw new IllegalArgumentException("Financer Record for this token not found!!");

                String msg = "";
                StringBuilder mailContent = null;
                String sanctionURL = finaAppStatus.getSanctionletter() == null || finaAppStatus.getSanctionletter().equals("") ? null : finaAppStatus.getSanctionletter();
                String agreemnetURL = finaAppStatus.getAgreementletter() == null || finaAppStatus.getAgreementletter().equals("") ? null : finaAppStatus.getAgreementletter();
                switch (statusType) {
                case APPROVED:
                    msg = "Dear " + name + " , " + " " + financer.getInstitutionName() + " has accepted your application for Transfer of ownership with application number " + appNo;

                    mailContent = new StringBuilder("<tr><td>Dear ").append(name).append(" ,")
                            .append(" your application for Transfer of ownership with application number " + appNo + "has been accepted by the Financier ")
                            .append(financer.getInstitutionName()).append(", For more details or to re-initiate the application please check application status. ")
                            .append(financer.getInstitutionName()).append("</td></tr><tr>Thank You</tr><tr>AP_Road Transport</tr></table>");
                    msgModel = new CustMsgModel();
                    msgModel.setCustName(name);
                    msgModel.setMobileNo(mobNo + "," + vehicleRc.getUserId().getMobile());
                    msgModel.setSmsMsg(msg);
                    msgModel.setTo(email);
                    msgModel.setVehicleRcId(vehicleRc.getVehicleRcId() + "");
                    msgModel.setMailContent(mailContent.toString());
                    msgModel.setSubject("Financer response Accepted");
                    break;

                case REJECTED:
                    msg = "Dear " + name + " , " + " " + financer.getInstitutionName() + " has rejected your application for Transfer of ownership with application number " + appNo;

                    mailContent = new StringBuilder("<tr><td>Dear ").append(name).append(" ,")
                            .append(" your application for Transfer of ownership with application number " + appNo + "has been rejected by the Financier ")
                            .append(financer.getInstitutionName()).append(", For more details or to re-initiate the application please check application status. ")
                            .append("</td></tr><tr>Thank You</tr><tr>AP_Road Transport</tr></table>");
                    msgModel = new CustMsgModel();
                    msgModel.setCustName(name);
                    msgModel.setMobileNo(mobNo + "," + vehicleRc.getUserId().getMobile());
                    msgModel.setSmsMsg(msg);
                    msgModel.setTo(email);
                    msgModel.setVehicleRcId(vehicleRc.getVehicleRcId() + "");
                    msgModel.setMailContent(msg);
                    msgModel.setSubject("Financer response REJECTED");
                    break;
                }
                log.info(":::setMsgModel::::end:::::::");
            } catch (Exception e) {
                throw new Exception();
            }
        }
        return msgModel;
    }


    // @Transactional
	// public String applyForHPTByCitizenForFinancerEnd(HPTFormModel
	// hptFormModel) {
	// if(hptFormModel==null){
	// log.error("HPTFormModel :: " + hptFormModel);
	// throw new IllegalArgumentException("model is empty!!!");
	// }
	// VehicleRCEntity
	// vehicleRc=vehicleDAO.getVehicleRc4Pr(hptFormModel.getPrNumber());
	// if(vehicleRc==null){
	// log.error("Pr "+hptFormModel.getPrNumber()+" number Invalid");
	// throw new IllegalArgumentException("Pr "+hptFormModel.getPrNumber()+"
	// number Invalid");
	// }
	// VehicleFinanceDtlstEntity financeDtls =
	// vehicleFinanceDAO.getRcrdForVehicleRc(vehicleRc.getVehicleRcId());
	// if (financeDtls == null){
	// log.error("This vehicles finance record not available!!!");
	// throw new IllegalArgumentException("This vehicles finance record not
	// available!!!");
	// }
	//
	// UserEntity financer = userDAO.findByUserId(financeDtls.getFinancerId());
	// if (financer == null || financer.getUserType() !=
	// UserType.ROLE_ONLINE_FINANCER){
	// log.error("Financier not found");
	// throw new IllegalArgumentException("Financier not found");
	// }
	// if(ObjectsUtil.isNull(hptFormModel.getAppNo()) ||
	// hptFormModel.getAppNo().trim().equals("")){
	// log.error("Appno must not be empty");
	// throw new IllegalArgumentException("Appno must not be empty");
	// }
	//// CustIndividualDetailsEntity custIndiv =
	// customerDAO.getByVehicleRcId(vehicleRc.getVehicleRcId());
	// log.info("HPT APPLY:::::::::::: adhar no from citizen checking with
	// vehicleOwner customer");
	// FinanceTokenEntity
	// financeToken=financeTokenDAO.getTokenId(vehicleRc.getVehicleRcId(),
	// ServiceType.HPT.getValue());
	// if(financeToken!=null &&
	// financeToken.getAppStatus()==Status.HPT_BUYER_REQUEST.getValue())
	// throw new IllegalArgumentException("HPT already applied!!");
	// financeToken = createNewFinanceTokenTbl(UserType.ROLE_CUSTOMER_IND,
	// vehicleRc.getVehicleRcId(), ServiceType.HPT,0l);
	// financeToken.setTokenId(hptFormModel.getAppNo());
	// FinancerAppStatusEntity
	// financeAppEntity=financeAppStatusDAO.getFinancerAppFromToken(financeToken.getTokenId(),financer);
	// if(financeAppEntity==null)
	// financeAppEntity = createFinanceAppTbl(financeDtls.getFinancerId(),
	// financeToken.getTokenId(), financer, ServiceType.HPT);
	// log.info("HPT APPLY:::::::::::: HPT is applied on behalf of customer by
	// financer"
	// + financeAppEntity.getFinancerId());
	// return "Successfully Applied for HPT";
	// }

	@Transactional
	public String approveRejectHPTRequest(FinanceApproveRejectModel financeModel) throws NotFoundException {
		log.info(":::approveRejectHPTRequest:::start:::::");
		if (financeModel == null)
			throw new IllegalArgumentException("No data found!!!");
		Long vehiclercId = null;
		try {
			vehiclercId = Long.valueOf(financeModel.getVehicleRcId());
		} catch (NumberFormatException e) {
			throw new IllegalArgumentException("Invalid VehicleRcId!!!");
		}
		Long financerId = financeModel.getFinancerId();
		Status status = financeModel.getStatus();
		String comments = financeModel.getComment();
		String attachments = financeModel.getAttachmentsURL();

		if (!(status == Status.APPROVED || status == Status.REJECTED))
			throw new IllegalArgumentException("Invalid Status send!!");

		UserEntity financer = userDAO.findByUserId(financerId);
		if (financer == null || financer.getUserType() != UserType.ROLE_ONLINE_FINANCER)
			throw new IllegalArgumentException("Financier not found");

		VehicleFinanceDtlstEntity financeDtls = vehicleFinanceDAO.getVehicleFinanceRcr(vehiclercId,
				Status.APPROVED.getValue());
		if (financeDtls == null)
			throw new NotFoundException("This application is either not financed or not approved by RTO!!");

		FinanceTokenEntity finaneToken = financeTokenDAO.getVehicleRcIdFromToken(financeModel.getFinancerToken());
		if (finaneToken == null)
			throw new NotFoundException("This application no. has not generated yet!!");
		// if(finaneToken.getServiceType()!=financeModel.getServiceType())
		// throw new IllegalArgumentException("No Such request for Financier
		// approval exists!!");
		FinancerAppStatusEntity financeAppStatus = financeAppStatusDAO
				.getFinancerApp4Token(financeModel.getFinancerToken(), financerId);
		if (financeAppStatus == null)
			throw new IllegalArgumentException("Financier not permitted");
		log.info("Going to take action on token : " + financeAppStatus.getTokenId());
		
		finaneToken.setAppStatus(status.getValue());
		finaneToken.setModifiedBy(financer.getUserName());
		finaneToken.setModifiedOn(DateUtil.toCurrentUTCTimeStamp());
		financeTokenDAO.saveOrUpdate(finaneToken);
		financeAppStatus.setFinanceStatus(status.getValue());
		financeAppStatus.setModifiedBy(financer.getUserName());
		financeAppStatus.setModifiedOn(DateUtil.toCurrentUTCTimeStamp());
		financeAppStatusDAO.saveOrUpdate(financeAppStatus);

		if (!financeDtls.getFinancerId().equals(financerId))
			throw new IllegalArgumentException("This financer " + financer.getUserName()
					+ " is not an Authorized financer  for this vehcleRcId" + vehiclercId);

		if (status == Status.APPROVED) {
//			financeDtls.setFinanceTerminated(true);
			FinanceApproveDetailsEntity finAppDtls = new FinanceApproveDetailsEntity();
			finAppDtls.setAggrementUrl(financeModel.getAggrementURL());
			finAppDtls.setApprovedDate(DateUtil.toCurrentUTCTimeStamp());
			finAppDtls.setCreatedBy(financer.getUserName());
			finAppDtls.setCreatedOn(DateUtil.toCurrentUTCTimeStamp());
			finAppDtls.setFinanceAppStatus(financeAppStatus);
			finAppDtls.setFirstApproverAadhar(financeModel.getFirstApproverAadhar());
			finAppDtls.setFirstApproverName(financeModel.getFirstApproverName());
			finAppDtls.setModifiedBy(financer.getUserName());
			finAppDtls.setModifiedOn(DateUtil.toCurrentUTCTimeStamp());
			finAppDtls.setSecondApproverAadhar(financeModel.getSecondApproverAadhar());
			finAppDtls.setSecondApproverName(financeModel.getSecondApproverName());
			financeApproveDetailsDAO.save(finAppDtls);

		} 
			FinanceHistoryEntity financeHistory = new FinanceHistoryEntity();
			financeHistory.setAttachments(attachments);
			financeHistory.setComments(comments);
			financeHistory.setCreatedBy(financer.getUserName());
			financeHistory.setCreatedOn(DateUtil.toCurrentUTCTimeStamp());
			financeHistory.setFinancerId(financerId);
			financeHistory.setFinanceStatus(status.getValue());
			financeHistory.setModifiedBy(financer.getUserName());
			financeHistory.setModifiedOn(DateUtil.toCurrentUTCTimeStamp());
			financeHistory.setServiceType(finaneToken.getServiceType());
			financeHistory.setTokenId(financeModel.getFinancerToken());
			financeHistory.setVehicleRcId(finaneToken.getVehicleRc());
			financeHistoryDAO.save(financeHistory);
		
//		vehicleFinanceDAO.update(financeDtls);
		log.info(":::approveRejectHPTRequest:::end:::::");
		return "Successful updation of status for HPT";

	}

	@Transactional
	@Override
	public FinanceOtherServiceModel getHPTStatusOfVehicle(String prNumber, String appNumber)
			throws VehicleRcNotFoundException, NotFoundException, UserNotFoundException {
		VehicleRCEntity vehicleRc = vehicleDAO.getVehicleRc4Pr(prNumber);
		if (vehicleRc == null)
			throw new VehicleRcNotFoundException("This PrNumber is not Available!!!");

		VehicleFinanceDtlstEntity financeDtls = vehicleFinanceDAO.getRcrdForVehicleRc(vehicleRc.getVehicleRcId());
		if (financeDtls == null)
			throw new NotFoundException("This Vehicle is not financed");
		if (financeDtls.getRtoApproved() != Status.APPROVED.getValue())
			throw new NotFoundException("This Vehicle Finance not yet approved By RTO!");

		UserEntity user = userDAO.findByUserId(financeDtls.getFinancerId());
		if (ObjectsUtil.isNull(user))
			throw new UserNotFoundException("This Financier Doesnt exist:" + financeDtls.getFinancerId());

		FinanceOtherServiceModel hptForm = new FinanceOtherServiceModel();
		hptForm.setAgreementDate(financeDtls.getDateOfAgreement());
		hptForm.setFinancierId(financeDtls.getFinancerId());
		hptForm.setFinancierName(user.getFirstName());
		hptForm.setIsTerminated(financeDtls.getFinanceTerminated());

		FinanceTokenEntity fnanceToken = financeDAO.getTokenId(vehicleRc.getVehicleRcId(), ServiceType.HPT.getValue());
		if (fnanceToken == null)
			return hptForm;
		List<FinancerAppStatusEntity> financeAppStatus = financeAppStatusDAO
				.getFinancerAppList4Token(fnanceToken.getTokenId());
		if (financeAppStatus == null || financeAppStatus.isEmpty())
			return hptForm;
		FinancerAppStatusEntity financeAppSta = financeAppStatus.get(0);
		if (financeAppSta == null)
			return hptForm;
		hptForm.setAppStat(financeAppSta.getFinanceStatus());
		hptForm.setAppStatus(Status.getStatus(financeAppSta.getFinanceStatus()).getLabel());
		hptForm.setAppNo(financeAppSta.getTokenId());
		hptForm.setPrNumber(fnanceToken.getVehicleRc().getPrNumber());
		hptForm.setServiceType(fnanceToken.getServiceType());
		hptForm.setServiceCode(ServiceType.getServiceType(fnanceToken.getServiceType()).getCode());
		return hptForm;

	}

	@Transactional
	public AddressModel getAddressForUser(Long userId) {
//		UserEntity userEntity=userDAO.findByUserId(userId);
//		if(userEntity==null)
//			throw new IllegalArgumentException("User Not found"+userId);
		AddressEntity address=addressDAO.findByUserIdAndType(userId, "T");
		if(address==null)
			throw new IllegalArgumentException("The address of the financier not found.");
		AddressModel addModel = new AddressModel();
		MandalEntity mandal = address.getMandal();
		DistrictEntity district = null;
		StateEntity state = null;
		CountryEntity country = null;
		if (mandal != null)
			district = mandal.getDistrictEntity();
		if (district != null)
			state = district.getStateEntity();
		if (state != null)
			country = state.getCountryEntity();
		addModel.setAddressId(address.getAddressId());
		addModel.setCity(address.getCity());
		addModel.setCountryName(country != null ? country.getName() : "");
		addModel.setDistrictName(district != null ? district.getName() : "");
		addModel.setDoorNo(address.getDoorNo());
		addModel.setMandalName(mandal.getName());
		// addModel.setPostOffice(address.getPinCode());
		addModel.setStateName(state.getName());
		// addModel.setStatus(userEntity.getStatus());
		addModel.setStreet(address.getStreet());
		return addModel;
	}

	@Transactional
	public FinanceApp getDetailsForSanctionLetterGeneration(String tokenId, Long financerId) {
		log.info("------------------------Sanction details ----------------------------------");
		if (StringsUtil.isNullOrEmpty(tokenId)) {
		    log.error("TokenId is empty !!");
			throw new IllegalArgumentException("TokenId is empty !!");
		}
		FinanceTokenEntity fnanceToken = financeDAO.getVehicleRcIdFromToken(tokenId);
		if (ObjectsUtil.isNull(fnanceToken)) {
		    log.error("TokenId is Invalid !!");
			throw new IllegalArgumentException("TokenId is Invalid !!!");
		}
		FinancerAppStatusEntity financeAppStatus = financeAppStatusDAO.getFinancerApp4Token(tokenId, financerId);
		if (ObjectsUtil.isNull(financeAppStatus)) {
		    log.error("Financier need to accept the Application before generation of  Sanction Letter !!!");
			throw new IllegalArgumentException(
					"Financier need to accept the Application before generation of  Sanction Letter !!!");
		}
		// if(financeAppStatus.getFinanceStatus()!=
		// Status.STEP2_FINANCER_ACCEPTED.getValue())
		// throw new IllegalArgumentException("Financier need to accept the
		// Application before generation of Sanction Letter !!!");
		// VehicleFinanceDtlstEntity
		// vehicleFinance=vehicleFinanceDAO.getRcrdForVehicleRc(fnanceToken.getVehicleRc().getVehicleRcId());
		FinanceApp financeApp = getDetailsOfCust(tokenId);
		
		String name = financerDAO.getByUserId(financeAppStatus.getFinancerId().getUserId()).getName();
		financeApp.setFinancerName(name);
		financeApp.setRequestedDate(financeAppStatus.getRequestedDate());
		return financeApp;
	}

	@Transactional
	public FinanceModel getCustomerFinanceDtls(String tokenId, Long financerId) {
		FinanceTokenEntity financeToken = financeTokenDAO.getVehicleRcIdFromToken(tokenId);
		if (financeToken == null)
			throw new IllegalArgumentException("Invalid finance token..!!");
		VehicleFinanceDtlstEntity vehicleFinanceDtlstEntity = vehicleFinanceDAO
				.getRcrdForVehicleRc(financeToken.getVehicleRc().getVehicleRcId());
		if (vehicleFinanceDtlstEntity == null)
			throw new IllegalArgumentException("This vehicle is yet not financed!!");
		/*if (vehicleFinanceDtlstEntity.getRtoApproved() != Status.APPROVED.getValue())
			throw new IllegalArgumentException("This vehicle is yet not approved by RTO!!");*/
		FinanceModel financeModel = new FinanceModel();
		financeModel.setDateOfAgreement(vehicleFinanceDtlstEntity.getDateOfAgreement());
		financeModel.setAmount(vehicleFinanceDtlstEntity.getFinanceAmount());
		financeModel.setEmi(vehicleFinanceDtlstEntity.getFinanceEmi());
		financeModel.setFinancerId(financerId);
		financeModel.setFinancerMode(FinanceType.ONLINE.getId());
		financeModel.setTenure(vehicleFinanceDtlstEntity.getTenure());
		financeModel.setVehicleRcId(financeToken.getVehicleRc().getVehicleRcId() + "");
		financeModel.setIntrestRate(vehicleFinanceDtlstEntity.getIntrestRate());
		financeModel.setChequeNo(vehicleFinanceDtlstEntity.getChequeNo());
		financeModel.setPaymentMode(vehicleFinanceDtlstEntity.getPaymentMode());
		return financeModel;
	}

	@Transactional
	public String saveSanctionLetterURL(String tokenId, Long financerId, String urlSanctionLetter) {
		FinanceTokenEntity fnanceToken = financeDAO.getVehicleRcIdFromToken(tokenId);
		if (fnanceToken == null)
			throw new IllegalArgumentException("TokenId is Invalid !!!");
		FinancerAppStatusEntity financeAppStatus = financeAppStatusDAO.getFinancerApp4Token(tokenId, financerId);
		if (financeAppStatus == null)
			throw new IllegalArgumentException(
					"Financier need to accept the Application before generation of  Sanction Letter !!!");
		if (financeAppStatus.getFinanceStatus() != Status.STEP2_FINANCER_ACCEPTED.getValue())
			throw new IllegalArgumentException(
					"Financier need to accept the Application before generation of  Sanction Letter !!!");
		financeAppStatus.setSanctionletter(urlSanctionLetter);
		financeAppStatusDAO.update(financeAppStatus);
		return "saved success";
	}

	@Transactional
	public Long getVehicleRcIdfromPr(String prNum) {
		VehicleRCEntity vehicleRCEntity = vehicleDAO.getVehicleRc4Pr(prNum);
		return vehicleRCEntity == null ? 0l : vehicleRCEntity.getVehicleRcId();
	}

	@Override
	@Transactional
	public Boolean isHPAAppliedForPRnum(String prNum) throws VehicleRcNotFoundException {
		VehicleRCEntity vehicleRCEntity = vehicleDAO.getVehicleRc4Pr(prNum);
		if (vehicleRCEntity == null)
			throw new VehicleRcNotFoundException();
		// FinanceTokenEntity finanToken =
		// financeTokenDAO.getLastActionOnVehicleRc(vehicleRCEntity.getVehicleRcId());
		// if (finanToken == null)
		// return false;
		VehicleFinanceDtlstEntity vehicleFinanceDt = vehicleFinanceDAO
				.getVehicleFinanceRcr(vehicleRCEntity.getVehicleRcId(), Status.APPROVED.getValue());
		if (vehicleFinanceDt == null)
			return false;

		return !(vehicleFinanceDt.getFinanceTerminated());
	}
	
	@Transactional
	public Boolean isHPAAppliedForPRnum(Long vehicleRcId) throws VehicleRcNotFoundException {
	    VehicleRCEntity vehicleRCEntity = vehicleDAO.get(vehicleRcId);
	    if (vehicleRCEntity == null)
	        throw new VehicleRcNotFoundException();
	    // FinanceTokenEntity finanToken =
	    // financeTokenDAO.getLastActionOnVehicleRc(vehicleRCEntity.getVehicleRcId());
	    // if (finanToken == null)
	    // return false;
	    VehicleFinanceDtlstEntity vehicleFinanceDt = vehicleFinanceDAO
	            .getVehicleFinanceRcr(vehicleRCEntity.getVehicleRcId(), Status.APPROVED.getValue());
	    if (vehicleFinanceDt == null)
	        return false;

	    return !(vehicleFinanceDt.getFinanceTerminated());
	}

    @Override
    @Transactional
    public FinanceModel getFinanceDeatils(String prNum, Long vehicleRcId) throws VehicleRcNotFoundException {
        VehicleRCEntity vehicleRCEntity = null;
        if (ObjectsUtil.isNotNull(vehicleRcId)) {
            vehicleRCEntity = vehicleDAO.get(vehicleRcId);
        } else if (!StringsUtil.isNullOrEmpty(prNum)) {
            vehicleRCEntity = vehicleDAO.getVehicleRc4Pr(prNum);
        }
        if (vehicleRCEntity == null)
            throw new VehicleRcNotFoundException();

        FinanceModel financeModel = new FinanceModel();
        
        VehicleFinanceDtlstEntity vehicleFinanceDtlstEntity =
                vehicleFinanceDAO.getVehicleFinanceRcr(vehicleRCEntity.getVehicleRcId(), Status.APPROVED.getValue());
        if (vehicleFinanceDtlstEntity != null){
            financeModel.setFinancerMode(FinanceType.ONLINE.getId());
            financeModel.setFinanceTerminated(vehicleFinanceDtlstEntity.getFinanceTerminated());
        } else {
            FinanceDetailsEntity financeDetailsEntity = financeDtlsDAO.getFinanceDetailsOfVehicleRcd(vehicleRCEntity.getVehicleRcId());
            if(financeDetailsEntity != null) {
                financeModel.setFinancerMode(FinanceType.OFFLINE.getId());
            } else {
                financeModel.setFinancerMode(FinanceType.NA.getId());
                financeModel.setIsFinance(false);
            }
        }
        return financeModel;
    }
	
	@Transactional
	public FinanceOtherServiceModel applyForFinanceApprovalOtherService(FinanceOtherServiceModel model,
			Long requesterId) throws VehicleRcNotFoundException, NotFoundException, FoundException {

		ServiceType serviceFromId = ServiceType.getServiceType(model.getServiceType());
		ServiceType serviceFromCode = ServiceType.getServiceType(model.getServiceCode());
		if (serviceFromId == null && serviceFromCode == null){
		    log.error("Error :: Neither Service code nor service type is specified!!");
			throw new IllegalArgumentException("Neither Service code nor service type is specified!!");
		}
		ServiceType service = serviceFromId == null ? serviceFromCode : serviceFromId;

		VehicleRCEntity vehicleRc = vehicleDAO.getVehicleRc4Pr(model.getPrNumber());
		if (vehicleRc == null){
		    log.error("Error :: Vehicle Rc not found!");
			throw new VehicleRcNotFoundException("Vehicle Rc not found!");
		}
		VehicleFinanceDtlstEntity vehicleFinanceDt = vehicleFinanceDAO.getVehicleFinanceRcr(vehicleRc.getVehicleRcId(),
				Status.APPROVED.getValue());
		if (vehicleFinanceDt == null || vehicleFinanceDt.getFinanceTerminated()){
		    log.error("Error :: The Pr " + model.getPrNumber() + " is not financed!");
			throw new NotFoundException("The Pr " + model.getPrNumber() + " is not financed!");
		}
		UserEntity user = userDAO.findByUserId(requesterId);
		if (user == null){
		    log.error("Error :: Invalid USER !!");
			throw new IllegalArgumentException("Invalid USER !!");
		}
		UserEntity financer = userDAO.findByUserId(vehicleFinanceDt.getFinancerId());
		if (financer == null){
		    log.error("Error :: Invalid Financier !!");
			throw new IllegalArgumentException("Invalid Financier !!");
		}
		FinanceTokenEntity finaneToken = financeTokenDAO.getVehicleRcIdFromTokenWithReinitiated(model.getAppNo());
		if (finaneToken != null){
		    if(finaneToken.getAppStatus() == Status.APP_RE_INITIATED_FINANCE.getValue()){
		        finaneToken.setAppStatus(Status.PENDING.getValue());
		        financeTokenDAO.update(finaneToken);
		    } else {
		        log.error("Error :: This application no. has been generated already, Incorrect Application Num!!");
		        throw new FoundException("This application no. has been generated already, Incorrect Application Num!!");
		    }
		    financeAppStatusDAO.setAppStatus(finaneToken.getTokenId(), Status.PENDING);
		} else {
		    createNewFinanceTokenTbl(user.getUserType(), vehicleRc.getVehicleRcId(), service, 0.0, model.getAppNo());
		    createFinanceAppTbl(vehicleFinanceDt.getFinancerId(), model.getAppNo(), user, service);
		}

		return model;

	}

	@Transactional
	public String approveRejectOtherService(FinanceApproveRejectModel model) throws NotFoundException {

		if (model == null)
			throw new IllegalArgumentException("Data must not be empty!");
		if (!(model.getStatus() == Status.APPROVED || model.getStatus() == Status.REJECTED))
			throw new IllegalArgumentException("Invalid status!");

		UserEntity user = userDAO.findByUserId(model.getFinancerId());
		if (user == null || user.getUserType() != UserType.ROLE_ONLINE_FINANCER)
			throw new IllegalArgumentException("Invalid online financier!!");

		FinanceTokenEntity finaneToken = financeTokenDAO.getVehicleRcIdFromToken(model.getFinancerToken());
		if (finaneToken == null)
			throw new NotFoundException("This application no. has not generated yet!!");
		// if(model.getServiceType()==null )
		// throw new IllegalArgumentException("ServiceType is not specified!");
		// if(finaneToken.getServiceType()!=model.getServiceType())
		// throw new IllegalArgumentException("No Such request for Financier
		// approval exists!!");
		FinancerAppStatusEntity financeAppStatus = financeAppStatusDAO.getFinancerApp4Token(model.getFinancerToken(),
				model.getFinancerId());
		if (financeAppStatus == null)
			throw new IllegalArgumentException("Financier not permitted");

		finaneToken.setAppStatus(model.getStatus().getValue());
		finaneToken.setModifiedBy(user.getUserName());
		finaneToken.setModifiedOn(DateUtil.toCurrentUTCTimeStamp());
		financeTokenDAO.saveOrUpdate(finaneToken);
		financeAppStatus.setFinanceStatus(model.getStatus().getValue());
		financeAppStatus.setModifiedBy(user.getUserName());
		financeAppStatus.setModifiedOn(DateUtil.toCurrentUTCTimeStamp());
		financeAppStatusDAO.saveOrUpdate(financeAppStatus);
		
		FinanceHistoryEntity financeHistory = new FinanceHistoryEntity();
//		financeHistory.setAttachments(attachments);
		financeHistory.setTokenId(model.getFinancerToken());
		financeHistory.setComments(model.getComment());
		financeHistory.setCreatedBy(user.getUserName());
		financeHistory.setCreatedOn(DateUtil.toCurrentUTCTimeStamp());
		financeHistory.setFinancerId(user.getUserId());
		financeHistory.setFinanceStatus(model.getStatus().getValue());
		financeHistory.setModifiedBy(user.getUserName());
		financeHistory.setModifiedOn(DateUtil.toCurrentUTCTimeStamp());
		financeHistory.setServiceType(finaneToken.getServiceType());
		financeHistory.setVehicleRcId(finaneToken.getVehicleRc());
		financeHistoryDAO.save(financeHistory);

		return "Successfully updated";

	}

	@Transactional
	public HashMap<String, List> listOfRtoService4Financer(Long financierId, List<Integer> status) {
		RTAOfficeModel model = new RTAOfficeModel();
		UserEntity financer = userDAO.findByUserId(financierId);
		List<FinancerAppStatusEntity> financeAppsStatus = financeAppStatusDAO.getFinancerAppListMultiStatus(financer,
				status, 0, 0);
		if (financeAppsStatus == null)
			return null;
		VehicleRCEntity vehicle = null;
		Integer serviceType = null;
		Map<Integer, ServiceMasterModel> serviceMap = new HashMap<>();
		ServiceMasterModel serviceMaster = null;
		Map<Long, RTAOfficeModel> rtaOfficeMap = new HashMap<>();
		RTAOfficeModel rtaOfficeModel = null;
		ServiceType serviceTy = null;
		FinanceTokenEntity financeTokenEnity = null;
		for (FinancerAppStatusEntity financeApp : financeAppsStatus) {
			financeTokenEnity = financeTokenDAO.getVehicleRcIdFromToken(financeApp.getTokenId());
			if (financeApp == null)
				throw new IllegalArgumentException("Finance Token Not found!");
			vehicle = financeTokenEnity.getVehicleRc();
			serviceType = financeTokenEnity.getServiceType();

			if (!rtaOfficeMap.containsKey(vehicle.getRtaOfficeId().getRtaOfficeId())) {
				rtaOfficeModel = rtaOfficeHelper.convertToModel(vehicle.getRtaOfficeId());
				rtaOfficeMap.put(vehicle.getRtaOfficeId().getRtaOfficeId(), rtaOfficeModel);
			}
			if (!serviceMap.containsKey(serviceType)) {
				serviceTy = ServiceType.getServiceType(serviceType);
				serviceMaster = new ServiceMasterModel();
				serviceMaster.setCode(serviceTy.getCode());
				serviceMaster.setName(serviceTy.getLabel());
				serviceMaster.setServiceId(serviceTy.getValue());
				serviceMap.put(serviceType, serviceMaster);
			}
		}

		HashMap map = new HashMap<String, List>();
		map.put("rto", rtaOfficeMap.values());
		map.put("service", serviceMap.values());
		return map;
	}

	@Transactional
	public Boolean isOnlineFinanced(String prNum) {
		VehicleRCEntity vehicleRc = vehicleDAO.getVehicleRc4Pr(prNum);
		VehicleFinanceDtlstEntity vehicelDtls = vehicleFinanceDAO.getVehicleFinanceRcr(vehicleRc.getVehicleRcId(),
				Status.APPROVED.getValue());
		if (vehicelDtls == null)
			return false;
		else
			return !vehicelDtls.getFinanceTerminated();
	}

	@Transactional
	public void financeApproveRejectByRTO(String userName, Status status, HPAHPTSyncModel hPAHPTSyncModel) {
		if (!(status == Status.APPROVED || status == Status.REJECTED))
			throw new IllegalArgumentException("Invalid status !!");
		FinanceTokenEntity financeToken = financeTokenDAO.getVehicleRcIdFromToken(hPAHPTSyncModel.getAppNumber());
		if (financeToken == null)
			throw new IllegalArgumentException("Invalid Token Id!!");
		ServiceType service = ServiceType.getServiceType(financeToken.getServiceType());
		switch (service) {
    		case HPA:
    		    actionHPAByRTA(userName, status, financeToken.getVehicleRc().getVehicleRcId());
    			break;
    		case HPT:
    		    VehicleFinanceDtlstEntity vehicelDtls = vehicleFinanceDAO.getVehicleFinanceRcr(financeToken.getVehicleRc().getVehicleRcId(),
    					Status.APPROVED.getValue());
    			if (vehicelDtls == null)
    				throw new IllegalArgumentException("vehicle Finance details not found!!!");
    			vehicelDtls.setFinanceTerminated(status == Status.APPROVED ? true : false);
    			vehicelDtls.setModifiedBy(userName);
    			vehicelDtls.setModifiedOn(DateUtil.toCurrentUTCTimeStamp());
    			vehicleFinanceDAO.saveOrUpdate(vehicelDtls);
    			break;
            default:
                log.error("Service Not found : " + service);
                break;
		}
		
		vehicleService.updateRcApproverUserId(hPAHPTSyncModel.getActionModelList(), financeToken.getVehicleRc().getVehicleRcId());
	}
	
	@Override
	@Transactional
    public void actionHPAByRTA(String userName, Status status, Long vehicleRcId) {
	    VehicleFinanceDtlstEntity vehicelDtls = vehicleFinanceDAO.getVehicleFinanceRcr(vehicleRcId, null);
        if (vehicelDtls == null)
            throw new IllegalArgumentException("vehicle Finance details not found!!!");
        vehicelDtls.setRtoApproved(status.getValue());
        vehicelDtls.setModifiedBy(userName);
        vehicelDtls.setModifiedOn(DateUtil.toCurrentUTCTimeStamp());
        vehicleFinanceDAO.saveOrUpdate(vehicelDtls);
	}
	
	@Override
	@Transactional
    public SaveUpdateResponse reIterateAppFinanceStep(String appNo) {
		SaveUpdateResponse response = new SaveUpdateResponse();
		FinanceTokenEntity token = financeTokenDAO.getVehicleRcIdFromToken(appNo);
		if (token == null){
			response.setStatus(SaveUpdateResponse.FAILURE);
			response.setCode(HttpStatus.NOT_FOUND.value());
			response.setMessage("Application Not Found at Financer !!!");
			return response;
		}
		token.setAppStatus(Status.APP_RE_INITIATED_FINANCE.getValue());
		financeAppStatusDAO.setAppStatus(appNo, Status.APP_RE_INITIATED_FINANCE);
		
		response.setStatus(SaveUpdateResponse.SUCCESS);
        response.setCode(HttpStatus.OK.value());
        response.setMessage("Application Re-Initiated At Financer !!!");
		return response;
	}
	
	@Override
	@Transactional
	public CustMsgModel getCustomerMessageModel(Long financerId, Long dealerId, Long vehicleRcId) {
	    VehicleRCEntity vrc = vehicleDAO.get(vehicleRcId);
	    CustMsgModel custMsgModel = null;
	    if (vrc != null) {
	        UserEntity financer = userDAO.findByUserId(financerId);
	        UserEntity dealer = userDAO.findByUserId(dealerId);
	        FinanceTokenEntity financeToken = financeTokenDAO.getTokenId(vehicleRcId,
	                ServiceType.FINANCE_NEW_REGISTARTION_SERVICE.getValue());
	        custMsgModel = new CustMsgModel();
	        custMsgModel.setTo(financer.getEmail());
	        custMsgModel.setSubject("Dealer acceptance");
	        String custName = "";
	        OwnershipType ownershipType = OwnershipType.getOwnershipType(vrc.getOwnershipType());
	        if (ownershipType == OwnershipType.INDIVIDUAL) {
	            CustIndividualDetailsEntity cide = customerDAO.getByVehicleRcId(vrc.getVehicleRcId());
	            custName = cide.getDisplayName();
	        } else if (ownershipType == OwnershipType.COMPANY
	                || ownershipType == OwnershipType.POLICE
	                || ownershipType == OwnershipType.STU_VEHICLES
	                || ownershipType == OwnershipType.ORGANIZATION) {
	            CustCorporateDetailsEntity ccde = corpDAO.getByVehicleRcId(vrc.getVehicleRcId());
	            custName = ccde.getDisplayName();
	        } 
	        custMsgModel.setCustName(custName);
	        custMsgModel.setMailContent(getMailContent(financeToken.getTokenId(), custName, dealer.getFirstName()));
	    }
	    return custMsgModel;
	}
	
	private String getMailContent(String token, String customerName, String dealerName) {
	    StringBuilder content = new StringBuilder();
	    content.append("<table><tr><td>The dealer, ").append(dealerName).append(" has accepted your request on behalf of ")
	    .append(customerName).append(", please enter the finance details using the application number ").append(token).append("</td></tr></table>");
	    return content.toString();
	}
}
